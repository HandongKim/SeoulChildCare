<Page ux:Class="QnA">
	<Router ux:Dependency="router"/>
		<WhileActive>
			<Callback Handler="{getQnAList}" />
			<!-- <Callback Handler="{detailDataClear}" /> -->
		</WhileActive>	
	<JavaScript>
		var Observable = require('FuseJS/Observable');
		var Backend = require('Backend.js');
		var type = Observable("제목", "내용", "작성자");
		var selectedType = Observable("제목");
		var type2 = Observable("비공개", "공개");
		var selectedType2 = Observable("비공개");
		var FileDownload = require('FileDownloadUX');
		var unReg = Observable(true);

		function checkClick() {
			unReg.value = !unReg.value
		}

		function unRegisteredChecked () {
			getQnAList();
		}


		pickerOn = Observable(false);
		pickerOn2= Observable(false);

		function pickerUp() {
			pickerOn.value = true;
		}

		function pickerDown() {
			pickerOn.value = false;
		}

		function pickerUp2() {
			console.log("wowowowowowowowowowowowowowowowowow");
			pickerOn2.value = true;
		}

		function pickerDown2() {
			if (selectedType2.value =="비공개") {
				console.log("PRIVATE");	
			} else {
				console.log("PUBLIC");
			}
			
			pickerOn2.value = false;
		}

		function selectedTypes(){
			selectedType.value = "제목";
			searchText.clear();
		}

		function pageCountInit(){
			pageCount.value = 1;
		}

		function confirmButtonAction() {
			alert.layer.value = "Background";
			getQnAList();
			// router.goBack();
		}

		function deleteAlertButtonAction() {
			deleteAlert.layer.value = "Background";
			getQnAList();
			// router.goBack();
		}


		var pageCount = Observable(1);
		var totalPage = Observable();
		var searchText = Observable();
		var globalSearch ;
		var qnas = Observable();
		var qnaDetailValue = Observable(); 
		var qnaFileValue = Observable();
		var isQuestion = Observable();

		//Url List
		var qnaListUrl = Backend.BASE_URL + Backend.qnaList_URL;
		var qnaListDtlUrl = Backend.BASE_URL + Backend.qnaListDtl_URL;
		var insertQnaCommListUrl = Backend.BASE_URL + Backend.insertQnaCommList_URL;
		var qnaUserUpdateUrl = Backend.BASE_URL + Backend.qnaUserUpdate_URL;
		var AREA = JSON.parse(Backend.dsParam).GVAREACODE;

		var warnningText = Observable("* '공개'로 선택 시 질문하시는내용이 모든 어린이집에 공개됩니다.");
		var warnningOn = Observable(false);

		function detailDataClear(){
			// console.log("문의하기 디테일 " + JSON.stringify(qnaDetailValue.value));
			// console.log("호출 되나!!!??");
			console.log("detailDataClear was called");
			warnningOn.value = false;
			//detail값 초기화
			qnaDetailValue.clear();

			if(qnaDetailValue.value!=null){

				console.log("qnaDetailValue.value!=null");

				qnaDetailValue.value.area.value = "";
				qnaDetailValue.value.bodComYn.value = "";
				qnaDetailValue.value.bodFormClss.value = "";
				qnaDetailValue.value.commSeq.value = "";
				qnaDetailValue.value.cont.value = "";
				qnaDetailValue.value.inqAdmCnt.value = "";
				qnaDetailValue.value.inqUsrCnt.value = "";
				qnaDetailValue.value.qaReplyYn.value = "";
				qnaDetailValue.value.regDate.value = "";
				qnaDetailValue.value.regDate1.value = "";
				qnaDetailValue.value.regDate2.value = "";
				qnaDetailValue.value.regId.value = "";
				qnaDetailValue.value.replyDepth.value = "";
				qnaDetailValue.value.replyRef.value = "";
				qnaDetailValue.value.replySortkey.value = "";
				qnaDetailValue.value.reqYn.value = "";
				qnaDetailValue.value.siteClssSnd.value = "";
				qnaDetailValue.value.title.value = "";
				qnaDetailValue.value.writeHost.value = "";
				qnaDetailValue.value.writerNm.value = "";
				qnaDetailValue.value.writerOrg.value = "";
				
			}else{
				//상세보기를 누르지 않으면 디테일 값이 없으므로 더미데이터를 만들어준다.
				var details = '{"AREA":null,"BOD_COM_YN":null,"BOD_FORM_CLSS":null,"COMM_SEQ":null,"CONT":null,"INQ_ADM_CNT":null,"INQ_USR_CNT":null,"QA_REPLY_YN":null,"REGDATE":null,"REGDATE1":null,"REGDATE2":null,"REGID":null,"REPLY_DEPTH":null,"REPLY_REF":null,"REPLY_SORTKEY":null,"REQ_YN":null,"SITE_CLSS_SND":null,"TITLE":null,"WRITE_HOST":null,"WRITER_NM":null,"WRITER_ORG":null}';
				qnaDetailValue.add(new qnaDetail(details));
				console.log("dummy qnaDetailValue : " + qnaDetailValue.value);
				warnningOn.value=true;
				qnaDetailValue.value.cont.value = "";
				qnaDetailValue.value.title.value = "";
			}
			//detail 파일 값 초기화
			if(qnaFileValue.value!=null){
			qnaFileValue.value.fileStoreDir.value = "";
			qnaFileValue.value.commClss.value = "";
			qnaFileValue.value.commSeq.value = "";
			qnaFileValue.value.fileNm.value = "";
			qnaFileValue.value.fileBlob.value = "";
			qnaFileValue.value.fileStoreNm.value = "";
			qnaFileValue.value.fileSize.value = "";
			qnaFileValue.value.fileSeq.value = "";
			}else{
				var detailFile = '{"FILE_STORE_DIR":null,"COMM_CLSS":null,"COMM_SEQ":null,"FILE_NM":null,"FILE_BLOB":null,"FILE_STORE_NM":null,"FILE_SIZE":null,"FILE_SEQ":null}';
				qnaFileValue.add(new qnaDetailFile(detailFile));
				console.log("더미 qnaFileValue : " + qnaFileValue.value);
			}
		}		

		//더 보기 클릭 시 호출
		function nextPage(){
			console.log("nextPage");
			if(pageCount.value == totalPage.value){
				console.log("최대 페이지까지 생성되었습니다.");
			}else{
			pageCount.value = pageCount.value + 1;
			getQnANextPage(pageCount);
			}
		}

		//http://www.aseoul.co.kr 외부
		//http://192.168.10.210 내부
		//검색 기능 지금 제대로 안되는것 같다.
		function searchContent(){
			//조회시 AREA 값은 GVAREACODE 값과 동일 하다. 나중에 서버에서 데이터 받아올 경우 그렇게 세팅 해야 한다.
			console.log("searchContent was called");
			pageCount.value = 1;
			var combo;
			if(selectedType.value=="제목"){
				combo = "head";
			}else if (selectedType.value=="내용"){
				combo = "main";
			} else if (selectedType.value=="작성자") {
				combo = "writer";
			}

			if(searchText.value==null){
				searchText.value = "";
				combo = "head";
			}

			qnas.clear();

			var dsParam = Backend.dsParam;

			// var AREA = "11110";
			var commClss = "Q";
			var fCombo = "ALL";
			var page = "1";




			var dsSearch = '{"AREA":"'+AREA+'","commClss":"'+commClss+'","fCombo":"'+fCombo+'","page":"1","sch_txt":"'+searchText.value+'","combo":"'+combo+'"}';
			console.log("===========================================");
			console.log("searchContent ds Search : " + dsSearch);

			var jsonParam = JSON.parse('{"dsParam":'+dsParam+',"dsSearch": '+dsSearch+'}');

			fetch(qnaListUrl, {
					method: 'POST',
					headers: {
						"Content-type": "application/json"
					},
					body: JSON.stringify(jsonParam)
			        }).then(function(response) {
						var searchResponseData = JSON.stringify(response);
						// console.log("2017.12.21 response : "+ JSON.stringify(response));
						var searchResponseBody = JSON.parse(response._bodyInit);
						// console.log("earchResponseBody : "+ JSON.stringify(searchResponseBody));
						// console.log("=================================================================");
						var searchResponseList = searchResponseBody.ds_qna[1];
						console.log("searchResponseList : "+ JSON.stringify(searchResponseList));
		
						// console.log("==============================");
						// console.log("searchResponseList.length : "+ searchResponseList.length);

						for (var i = 0; i < searchResponseList.length; i++) {
							// console.log("searchResponseList i : "+ JSON.stringify(searchResponseList[i]));
							qnas.add(new qna(searchResponseList[i]));
						}

						console.log("qnas : " + JSON.stringify(qnas.value));

						// 첫 호출 시 에러나면 여길 잘봐야 한다. 객체 형태로 안가져오고 무조건 하나만 가져온다고 생각하여 아래와 같이 소스 구성
						var count = searchResponseBody.ds_cnt[1];
						//들어오는 개수 계산하여 총 페이지 수 도출
						var objCount = parseInt(count[0].CNT);
						var preCnt = parseInt(objCount/5)
						var nextCnt = parseInt(objCount%5)
						if(nextCnt>0){
							preCnt = preCnt +1;
						}
						totalPage.value = preCnt;
						console.log("totalPage : " + JSON.stringify(totalPage.value));

						// searchText.clear();

			            return response.json();
			        }).then(function(jsonData) {
			            var data = jsonData.results[0];
			        }).catch(function(err) {

			        });
		}

		var isQuestionAnswered = Observable(false);
		var isFileAvailable = Observable(false);

		//qnaList 널 체크
		function qna(qna, index){
			this.INDEX = index;

			if(qna.COMM_CLSS!=null){
				this.commClss = qna.COMM_CLSS;
			}else{
				this.commClss = "";
			}

			if(qna.COMM_SEQ!=null){
				this.commSeq = qna.COMM_SEQ;
			}else{
				this.commSeq = "";
			}

			if(qna.IDX!=null){
				this.idx = qna.IDX;
			}else{
				this.idx = "";
			}

			if(qna.INQ_ADM_CNT!=null){
				this.inqAdmCnt = qna.INQ_ADM_CNT;
			}else{
				this.inqAdmCnt = "";
			}

			if(qna.INQ_USR_CNT!=null){
				this.inqUsrCnt = qna.INQ_USR_CNT;
			}else{
				this.inqUsrCnt = "";
			}

			if(qna.QA_REPLY_YN!=null){
				this.qaReplyYN = qna.QA_REPLY_YN;
			}else{
				this.qaReplyYn = "";
			}

			if(qna.REGDATE!=null){
				this.regDate = qna.REGDATE;
			}else{
				this.regDate = "";
			}

			if(qna.REGDATE1!=null){
				this.regDate1 = qna.REGDATE1;
			}else{
				this.regDate1 = "";
			}

			if(qna.REGDATE2!=null){
				this.regDate2 = qna.REGDATE2;
			}else{
				this.regDate2 = "";
			}

			if(qna.REPLY_DEPTH!=null){
				this.replyDepth = qna.REPLY_DEPTH;
			}else{
				this.replyDepth = "";
			}

			if(qna.REPLY_REF!=null){
				this.replyRef = qna.REPLY_REF;
			}else{
				this.replyRef = "";
			}

			if(qna.REQ_YN!=null){
				this.reqYn = qna.REQ_YN;
			}else{
				this.reqYn = "";
			}
			//수정필요
			if(this.reqYn =="처리완료"){
				this.complete = true;
			}else if(this.reqYn=="처리중"){
				this.complete = false;
			}

			if(qna.SITE_CLSS_SND!=null){
				this.siteClssSnd = qna.SITE_CLSS_SND;
			}else{
				this.siteClssSnd = "";
			}

			if(qna.TITLE!=null){
				this.title = qna.TITLE;
			}else{
				this.title = "";
			}

			if(qna.WRITER_NM!=null){
				this.writerNm = qna.WRITER_NM;
			}else{
				this.writerNm = "";
			}

			if(qna.WRITER_ORG!=null){
				this.writerOrg = qna.WRITER_ORG;
			}else{
				this.writerOrg = "";
			}
		}

		//http://www.aseoul.co.kr 외부
		//http://192.168.10.210 내부
		//처음 데이터 가져오기
		function getQnAList(){
			console.log("getQnAList first function Call ");
			console.log("getQnAList was called");
			var dsParam = Backend.dsParam;

			// var AREA = "11110";
			var commClss = "Q";
			var openN = "Y";

			searchText.value = "";

			if (unReg.value == true) {
				openN = "Y";
			} else {
				openN = "N";
			}

			var dsSearch = '{"AREA":"'+AREA+'","commClss":"'+commClss+'","page":"1","sch_txt":"","sCombo":"head", "openN":"'+openN+'"}';

			globalSearch = JSON.parse(dsSearch);
			var jsonParam = JSON.parse('{"dsParam":'+dsParam+',"dsSearch": '+dsSearch+'}');
			qnas.clear();

			console.log ("QnA jsonParam : " + JSON.stringify(jsonParam));



			fetch(qnaListUrl, {
					method: 'POST',
					headers: {
						"Content-type": "application/json"
					},
					body: JSON.stringify(jsonParam)
			        }).then(function(response) {
						var responseData = JSON.stringify(response);

						console.log("2018.01.31 responseData : " + responseData);

						var responseBody = JSON.parse(response._bodyInit);
						// console.log("2017.12.21 responseBody : "+ JSON.stringify(responseBody));
						// console.log("=================================================================");
						var responseList = responseBody.ds_qna[1];
						console.log("2017.12.21 responseList : "+ JSON.stringify(responseList));

		
						// console.log("==============================");
						// console.log("responseList.length : "+ responseList.length);
						// 무조건 본래 있는 곳으로 돌아올시 초기
						
						for (var i = 0; i < responseList.length; i++) {
							qnas.add(new qna(responseList[i], i));
						}

						var count = responseBody.ds_cnt[1];
						//들어오는 개수 계산하여 총 페이지 수 도출
						console.log("count : " + count[0].CNT);
						var objCount = parseInt(count[0].CNT);
						var preCnt = parseInt(objCount/5)
						var nextCnt = parseInt(objCount%5)
						if(nextCnt>0){
							preCnt = preCnt +1;
						}
						totalPage.value = preCnt;
						console.log("totalPage : " + JSON.stringify(totalPage.value));
						console.log("isQuestionAnswered : " + isQuestionAnswered.value);
			            return response.json();
			        }).then(function(jsonData) {
			            var data = jsonData.results[0];
			        }).catch(function(err) {

			        });
		}

		//http://www.aseoul.co.kr 외부
		//http://192.168.10.210 내부
		//다음페이지 넘기기
		function getQnANextPage(page){
			console.log("getQnANextPage was called");
			var sCombo;

			if(selectedType.value=="제목"){
				sCombo = "head";
			}else if (selectedType.value=="내용"){
				sCombo = "main";
			}else if (selectedType.value=="작성자"){
				sCombo = "writer";
			}

			if(searchText.value==null){
				searchText.value = "";
				sCombo = "head";
			}





			console.log("NextPage function Call ");
			var dsParam = Backend.dsParam;
			var dsSearch = '{"AREA":"'+AREA+'","commClss":"Q","page":"'+page.value+'","sch_txt":"'+searchText.value+'","sCombo":"'+sCombo+'"}';
			var jsonParam = JSON.parse('{"dsParam":'+dsParam+',"dsSearch": '+dsSearch+'}');
			console.log("nextPage Call ! : " + dsSearch);

			fetch(qnaListUrl, {
					method: 'POST',
					headers: {
						"Content-type": "application/json"
					},
					body: JSON.stringify(jsonParam)
			        }).then(function(response) {
						var responseData = JSON.stringify(response);

						var responseBody = JSON.parse(response._bodyInit);
						console.log("2017.12.21 responseBody : "+ JSON.stringify(responseBody));
						// console.log("=================================================================");
						var responseList = responseBody.ds_qna[1];
						console.log("2017.12.21 responseList : "+ JSON.stringify(responseList));

						for (var i = 0; i < responseList.length; i++) {
							qnas.add(new qna(responseList[i]));
						}

			            return response.json();
			        }).then(function(jsonData) {
			            var data = jsonData.results[0];
			        }).catch(function(err) {

			        });
		}

		//클릭한 목록의 값을 가져오고 디테일값을 호출 한다.
		function getClickListValue(value){
			console.log("getClickListValue was called");
			warnningOn.value = false;
			var qnaData = value.data;
			console.log("qnaData : "+JSON.stringify(qnaData));
			getDetailQnA(qnaData);
		}

		var isMyQuestion = Observable(false);



		//http://www.aseoul.co.kr 외부
		//http://192.168.10.210 내부
		// 수정 페이지 호출 
		function getDetailQnA(qnaData){
			var combo="";
			if(selectedType.value=="제목"){
				combo = "head";
			}else if (selectedType.value=="내용"){
				combo = "main";
			}else if (selectedType.value=="작성자"){
				combo = "writer";
			}

			isMyQuestion.value = false;
			isQuestionAnswered.value = false;
			isFileAvailable.value = false;







			if (qnaData.complete == true ) {
				isQuestionAnswered.value = true;				
			} else {
				isQuestionAnswered.value = false;
			}

			
			
			var LOGGED_IN_WRITER_NM     = JSON.parse(Backend.dsParam).GVMEMNAME;
			var LOGGED_IN_WRITER_ORG    = JSON.parse(Backend.dsParam).GVAREANAME;





			console.log("getDetailQnA was called");
			console.log("qnaData : "+qnaData);
			console.log("DetailValue function Call ");
			var dsParam = Backend.dsParam;
			var dsSearch = '{"combo":"'+combo+'","commClss":"Q","commSeq":"'+JSON.stringify(qnaData.commSeq)+'","sch_txt":""}';
		
			console.log("dsSearch : " + dsSearch);
			var jsonParam = JSON.parse('{"dsParam":'+dsParam+',"dsSearch": '+dsSearch+'}');

			fetch(qnaListDtlUrl, {
					method: 'POST',
					headers: {
						"Content-type": "application/json"
					},
					body: JSON.stringify(jsonParam)
			        }).then(function(response) {
						var responseData = JSON.stringify(response);
						console.log("responseData : "+ JSON.stringify(responseData));
						var detailBody = JSON.parse(response._bodyInit);
						// var ds_filelist = JSON.parse(response.ds_filelist);
						var qnaDetails = detailBody.ds_qna_dtl[1];
						console.log("qnaDetail : "+ JSON.stringify(qnaDetails));
						
						qnaDetailValue.clear();

						for (var i = 0; i < qnaDetails.length; i++) {
							qnaDetailValue.add(new qnaDetail(qnaDetails[i], i));
						}

						//수정 가능한 값 판단.

						console.log("=============================");
						var correct = qnaDetailValue.value.replyDepth;
						var questioner = qnaDetailValue.value.writerNm.value;

						console.log("questioner : " + questioner);
						console.log("LOGGED_IN_WRITER_NM : " + LOGGED_IN_WRITER_NM);

						if (questioner == LOGGED_IN_WRITER_NM) {
							console.log("questioner is equal to LOGGED_IN_WRITER_NM");
							isMyQuestion.value =  true;
						} else {
							console.log("questioner is not equal to LOGGED_IN_WRITER_NM");
							isMyQuestion.value = false;
						}



						console.log("correct : "+ correct);
						// 질의응답 리스트에서 선택한게 질문인지 답변인지 체크
						// true이면 질문, false이면 답변

						if(correct.value == 0){
							//질문
							isQuestion.value = true;
						}else{
							//답변
							isQuestion.value = false;
						}
						// console.log("=============================");
						// console.log("isQuestion : "+isQuestion.value);
						// console.log("=============================");

						// console.log("qnaDetailValue : " + JSON.stringify(qnaDetailValue));

						qnaFileValue.clear();

						var qnaFiles = detailBody.ds_filelist[1];
						console.log("qnaFiles : " + JSON.stringify(qnaFiles));

						if (qnaFiles.length == 0) {
							console.log("qnaFiles.length is Zero");
							isFileAvailable.value = false;
						} else {
							console.log("qnaFiles.length is not Zero");
							isFileAvailable.value = true;
						}



						console.log("qnaFiles.length : " + qnaFiles.length);
						for(var i = 0; i< qnaFiles.length; i++){
							qnaFileValue.add(new qnaDetailFile(qnaFiles[i]));
						}
						console.log("qnaFileValue : " +  JSON.stringify(qnaFileValue));
						console.log("qnaFileValue._values : " +  JSON.stringify(qnaFileValue._values));


						console.log("=============================");
						console.log("isQuestion : "+isQuestion.value);
						console.log("isFileAvailable : "+isFileAvailable.value);
						console.log("isQuestionAnswered : " + isQuestionAnswered.value);
						console.log("=============================");



						
			            return response.json();
			        }).then(function(jsonData) {
			            // var data = jsonData.results[0];
			        }).catch(function(err) {

			        });
		}

		function qnaDetail(qnaDetail, index){
			
			this.INDEX = index;
			if(qnaDetail.AREA!=null){
				this.area = Observable(qnaDetail.AREA);
			}else{
				this.area = Observable();
			}
			if(qnaDetail.BOD_COM_YN!=null){
				this.bodComYn = Observable(qnaDetail.BOD_COM_YN);
			}else{
				this.bodComYn = Observable();
			}
			if(qnaDetail.BOD_FORM_CLSS!=null){
				this.bodFormClss = Observable(qnaDetail.BOD_FORM_CLSS);
			}else{
				this.bodFormClss = Observable();
			}
			if(qnaDetail.COMM_SEQ!=null){
				this.commSeq = Observable(qnaDetail.COMM_SEQ);
			}else{
				this.commSeq = Observable();
			}
			if(qnaDetail.CONT!=null){
				this.cont = Observable(qnaDetail.CONT);
			}else{	
				this.cont = Observable();
			}
			if(qnaDetail.INQ_ADM_CNT!=null){
				this.inqAdmCnt = Observable(qnaDetail.INQ_ADM_CNT);
			}else{
				this.inqAdmCnt = Observable();
			}
			if(qnaDetail.INQ_USR_CNT!=null){
				this.inqUsrCnt = Observable(qnaDetail.INQ_USR_CNT);
			}else{
				this.inqUsrCnt = Observable();
			}
			if(qnaDetail.QA_REPLY_YN!=null){
				this.qaReplyYn = Observable(qnaDetail.QA_REPLY_YN);
			}else{
				this.qaReplyYn = Observable();
			}
			if(qnaDetail.REGDATE!=null){
				this.regDate = Observable(qnaDetail.REGDATE);
			}else{
				this.regDate = Observable();
			}
			if(qnaDetail.REGDATE1!=null){
				this.regDate1 = Observable(qnaDetail.REGDATE1);
			}else{
				this.regDate1 = Observable();
			}
			if(qnaDetail.REGDATE2!=null){
				this.regDate2 = Observable(qnaDetail.REGDATE2);
			}else{
				this.regDate2 = Observable();
			}
			if(qnaDetail.REGID!=null){
				this.regId = Observable(qnaDetail.REGID);
			}else{
				this.regId = Observable();
			}
			if(qnaDetail.REPLY_DEPTH!=null){
				this.replyDepth = Observable(qnaDetail.REPLY_DEPTH);
			}else{
				this.replyDepth = Observable();
			}
			if(qnaDetail.REPLY_REF!=null){
				this.replyRef = Observable(qnaDetail.REPLY_REF);
			}else{
				this.replyRef = Observable();
			}
			if(qnaDetail.REPLY_SORTKEY!=null){
				this.replySortkey = Observable(qnaDetail.REPLY_SORTKEY);
			}else{
				this.replySortkey = Observable();
			}
			if(qnaDetail.REQ_YN!=null){
				this.reqYn = Observable(qnaDetail.REQ_YN);
			}else{
				this.reqYn = Observable();
			}
			if(qnaDetail.SITE_CLSS_SND!=null){
				this.siteClssSnd = Observable(qnaDetail.SITE_CLSS_SND);
			}else{
				this.siteClssSnd = Observable();
			}
			if(qnaDetail.TITLE!=null){
				this.title = Observable(qnaDetail.TITLE);
			}else{
				this.title = Observable();
			}
			if(qnaDetail.WRITE_HOST!=null){
				this.writeHost = Observable(qnaDetail.WRITE_HOST);
			}else{
				this.writeHost = Observable();
			}
			if(qnaDetail.WRITER_NM!=null){
				this.writerNm = Observable(qnaDetail.WRITER_NM);
			}else{
				this.writerNm = Observable();
			}
			if(qnaDetail.WRITER_ORG!=null){
				this.writerOrg = Observable(qnaDetail.WRITER_ORG);
			}else{
				this.writerOrg = Observable();
			}
		}
		//qna 디테일 파일 값
		function qnaDetailFile(qnaDetailFile){
			if(qnaDetailFile.FILE_STORE_DIR!=null){
				this.fileStoreDir = Observable(qnaDetailFile.FILE_STORE_DIR);
			}else{
				this.fileStoreDir = Observable();
			}

			if(qnaDetailFile.COMM_CLSS!=null){
				this.commClss = Observable(qnaDetailFile.COMM_CLSS);
			}else{
				this.commClss = Observable();
			}

			if(qnaDetailFile.COMM_SEQ!=null){
				this.commSeq = Observable(qnaDetailFile.COMM_SEQ);
			}else{
				this.commSeq = Observable();
			}

			if(qnaDetailFile.FILE_NM!=null){
				this.hasFile = true;
				this.fileNm = Observable(qnaDetailFile.FILE_NM);
			}else{
				this.fileNm = Observable();
			}

			if(qnaDetailFile.FILE_BLOB!=null){
				this.fileBlob = Observable(qnaDetailFile.FILE_BLOB);
			}else{
				this.fileBlob = Observable();
			}

			if(qnaDetailFile.FILE_STORE_NM!=null){
				this.fileStoreNm = Observable(qnaDetailFile.FILE_STORE_NM);
			}else{
				this.fileStoreNm = Observable();
			}

			if(qnaDetailFile.FILE_SIZE!=null){
				this.fileSize = Observable(qnaDetailFile.FILE_SIZE);
			}else{
				this.fileSize = Observable();
			}

			if(qnaDetailFile.FILE_SEQ!=null){
				this.fileSeq = Observable(qnaDetailFile.FILE_SEQ);
			}else{
				this.fileSeq = Observable();
			}
			console.log("파일 생성 완료!");
		}

		var alert = {
			title: Observable(),
			message: Observable(),
			type: Observable("Check"),
			layer: Observable("Background")
		};


		var simpleAlert = {
			title: Observable(),
			message: Observable(),
			type: Observable("Check"),
			layer: Observable("Background")
		};

		var deleteAlert = {
			title: Observable(),
			message: Observable(),
			type: Observable("Check"),
			layer: Observable("Background")
		}

		var deleteAlertWithConfirmAndCancel = {
			title: Observable(),
			message: Observable(),
			type: Observable("Check"),
			layer: Observable("Background")
		}

		var cancelAlertWithConfirmAndCancel = {
			title: Observable(),
			message: Observable(),
			type: Observable("Check"),
			layer: Observable("Background")
		}


		function deleteAlertWithConfirmAndCancelCalled () {
			deleteAlertWithConfirmAndCancel.message.value="삭제하시겠습니까?";
			deleteAlertWithConfirmAndCancel.layer.value="Overlay";
		}

		function deleteAlertWithConfirmAndCancelCalledOff () {
			deleteAlertWithConfirmAndCancel.layer.value="Background";
		}

		function cancelAlertWithConfirmAndCancelCalled () {
			cancelAlertWithConfirmAndCancel.message.value="취소하시겠습니까?";
			cancelAlertWithConfirmAndCancel.layer.value="Overlay";
		}

		function cancelAlertWithConfirmAndCancelCalledOff () {
			cancelAlertWithConfirmAndCancel.layer.value="Background";
		}

		function sendData(){
			console.log("sendData was called");
			if(qnaDetailValue.value.commSeq.value==null || qnaDetailValue.value.commSeq.value==""){
				console.log("commSeq 없음");
				console.log("commSeq 없음 : " + qnaDetailValue.value.title.value );
				console.log("commSeq 없음 : " + qnaDetailValue.value.cont.value );
				registerSend();
			}else{
				console.log("commSeq 있음 : " +qnaDetailValue.value.commSeq.value);
				console.log("commSeq 있음 : " +qnaDetailValue.value.title.value);
				console.log("commSeq 있음 : " +qnaDetailValue.value.cont.value);
				modifySned();
				
			}
		}

		function modifySned(){
			console.log("modifySned function Call ");
			var dsParam = Backend.dsParam;

			var OPEN_YN = "";
			if (selectedType2.value=="비공개") {
				OPEN_YN = "N";
			} else {
				OPEN_YN = "Y";
			}

			var dsDetail = '{"REGDATE":"'+JSON.stringify(qnaDetailValue.value.regDate.value)
							+'","AREA":'+JSON.stringify(qnaDetailValue.value.area.value)
							+',"CONT":'+JSON.stringify(qnaDetailValue.value.cont.value)
							+',"COMM_SEQ":"'+JSON.stringify(qnaDetailValue.value.commSeq.value)
							+'","REPLY_REF":"'+JSON.stringify(qnaDetailValue.value.replyRef.value)
							+'","REGDATE1":'+JSON.stringify(qnaDetailValue.value.regDate1.value)
							+',"INQ_ADM_CNT":"'+JSON.stringify(qnaDetailValue.value.inqAdmCnt.value)
							+'","REGID":'+JSON.stringify(qnaDetailValue.value.regId.value)
							+',"SITE_CLSS_SND":'+JSON.stringify(qnaDetailValue.value.siteClssSnd.value)
							+',"QA_REPLY_YN":'+JSON.stringify(qnaDetailValue.value.qaReplyYn.value)
							+',"INQ_USR_CNT":"'+JSON.stringify(qnaDetailValue.value.inqUsrCnt.value)
							+'","REPLY_DEPTH":"'+JSON.stringify(qnaDetailValue.value.replyDepth.value)
							+'","WRITER_NM":'+JSON.stringify(qnaDetailValue.value.writerNm.value)
							+',"WRITE_HOST":"'+qnaDetailValue.value.writeHost.value
							+'","REGDATE2":'+JSON.stringify(qnaDetailValue.value.regDate2.value)
							+',"BOD_COM_YN":'+JSON.stringify(qnaDetailValue.value.bodComYn.value)
							+',"WRITER_ORG":'+JSON.stringify(qnaDetailValue.value.writerOrg.value)
							+',"BOD_FORM_CLSS":'+JSON.stringify(qnaDetailValue.value.bodFormClss.value)
							+',"REQ_YN":'+JSON.stringify(qnaDetailValue.value.reqYn.value)
							+',"TITLE":'+JSON.stringify(qnaDetailValue.value.title.value)
							+',"REPLY_SORTKEY":'+JSON.stringify(qnaDetailValue.value.replySortkey.value)
							+',"OPEN_YN":"'+OPEN_YN
							+'"}';

			console.log("update dsDetal : " + dsDetail);
			//첨부파일 수정필요
			var dsFileList = '{}';
			var jsonParam = JSON.parse('{"dsParam":'+dsParam+',"ds_qna_update": '+dsDetail+',"ds_filelist":""}');


			var validationCheck = false;
			
			validationCheck = validationCheckApproved();

			if (validationCheck == true ) {
				fetch(qnaUserUpdateUrl, {
					method: 'POST',
					headers: {
						"Content-type": "application/json"
					},
					body: JSON.stringify(jsonParam)
			        }).then(function(response) {
						var responseData = JSON.stringify(response);
						console.log("responseData : "+ JSON.stringify(responseData));
						alert.message.value = "수정되었습니다.";
						alert.layer.value = "Overlay";
			            return response.json();
			        }).then(function(jsonData) {
			            // var data = jsonData.results[0];
			        }).catch(function(err) {

				});
			} else {

			}
			
		}

		function validationCheckApproved () {
			var validated = false;
			var titleValidate = false;
			var contentValidate = false;

			if (qnaDetailValue.value.cont.value == null || qnaDetailValue.value.cont.value =="") {
				console.log("validationCheckApproved cont nil");
				contentValidate = false;
				simpleAlert.message.value = "내용을 입력해주세요.";
				simpleAlert.layer.value = "Overlay";
			} else  {
				contentValidate = true;
			}

			if (qnaDetailValue.value.title.value == null || qnaDetailValue.value.title.value == "") {
				console.log("validationCheckApproved title nil");
				titleValidate = false;
				simpleAlert.message.value = "제목을 입력해주세요.";
				simpleAlert.layer.value = "Overlay";
			} else {
				titleValidate = true;
			}


			if ((titleValidate == true) && (contentValidate == true )) {
				validated = true;
			} else {
				validated = false;
			}

			return validated;
		}

		function registerSend(){
			console.log("registerSend function Call ");
			// var dsParam = '{"GVAREACODE":"11110","GVBOOKGB":"01","GVESTIYEAR" :"2017","GVMEMCODE" :"SEOUL000000000000121","GVMEMID":"9999990","GVORGCLSS":"5","GVUSERCLSS" :"3"}';

			// var temp = '{"REGDATE":"'+JSON.stringify(qnaDetailValue.value.regDate.value)+'","AREA":'+JSON.stringify(qnaDetailValue.value.area.value)+',"CONT":'+JSON.stringify(qnaDetailValue.value.cont.value)+',"COMM_SEQ":"'+JSON.stringify(qnaDetailValue.value.commSeq.value)+'","REPLY_REF":"'+JSON.stringify(qnaDetailValue.value.replyRef.value)+'","REGDATE1":'+JSON.stringify(qnaDetailValue.value.regDate1.value)+',"INQ_ADM_CNT":"'+JSON.stringify(qnaDetailValue.value.inqAdmCnt.value)+'","REGID":'+JSON.stringify(qnaDetailValue.value.regId.value)+',"SITE_CLSS_SND":'+JSON.stringify(qnaDetailValue.value.siteClssSnd.value)+',"QA_REPLY_YN":'+JSON.stringify(qnaDetailValue.value.qaReplyYn.value)+',"INQ_USR_CNT":"'+JSON.stringify(qnaDetailValue.value.inqUsrCnt.value)+'","REPLY_DEPTH":"'+JSON.stringify(qnaDetailValue.value.replyDepth.value)+'","WRITER_NM":'+JSON.stringify(qnaDetailValue.value.writerNm.value)+',"WRITE_HOST":"'+JSON.stringify(qnaDetailValue.value.writeHost.value)+'","REGDATE2":'+JSON.stringify(qnaDetailValue.value.regDate2.value)+',"BOD_COM_YN":'+JSON.stringify(qnaDetailValue.value.bodComYn.value)+',"WRITER_ORG":'+JSON.stringify(qnaDetailValue.value.writerOrg.value)+',"BOD_FORM_CLSS":'+JSON.stringify(qnaDetailValue.value.bodFormClss.value)+',"REQ_YN":'+JSON.stringify(qnaDetailValue.value.reqYn.value)+',"TITLE":'+JSON.stringify(qnaDetailValue.value.title.value)+',"REPLY_SORTKEY":'+JSON.stringify(qnaDetailValue.value.replySortkey.value)+'}';

			// console.log("temp : " + temp);


			// {"REGDATE":1249007925000,"COMM_SEQ":504,"REPLY_REF":503,"OPEN_YN":"N","INQ_ADM_CNT":1,"SITE_CLSS_SND":"4","COMM_CLSS":"Q","IDX":3,"QA_REPLY_YN":"Y","INQ_USR_CNT":76,"REPLY_DEPTH":1,"WRITER_NM":"Ìó¨ÌîÑÎç∞Ïä§ÌÅ¨","WRITER_ORG":null,"REQ_YN":"Ï≤òÎ¶¨ÏôÑÎ£å","TITLE":"[ÎãµÎ≥Ä] czcz"}
			var SITE_CLSS_SND = JSON.parse(Backend.dsParam).GVORGCLSS;
			var WRITER_NM     = JSON.parse(Backend.dsParam).GVMEMNAME;
			var WRITER_ORG    = JSON.parse(Backend.dsParam).GVAREANAME;

			console.log("WRITER_ORG  : " + WRITER_ORG);


			var WRITE_HOST    = FileDownload.getIpAddress();
			var AREA          = JSON.parse(Backend.dsParam).GVAREACODE;
			var REGID         = JSON.parse(Backend.dsParam).GVMEMID;
			var OPEN_YN = "";

			if (selectedType2.value=="비공개") {
				OPEN_YN = "N";
			} else {
				OPEN_YN = "Y";
			}

			var dsParam = Backend.dsParam;

			console.log("dsParam : " + dsParam);

			var dsDetail = '{"CONT":"'+qnaDetailValue.value.cont.value
			+'","TITLE":"'+qnaDetailValue.value.title.value
			+'","SITE_CLSS_SND":"'+SITE_CLSS_SND+'","WRITER_NM":"'+WRITER_NM
			+'","WRITER_ORG":"'+WRITER_ORG+'","WRITE_HOST":"","AREA":"'+AREA
			+'","REGID":"'+REGID+'","OPEN_YN":"'+OPEN_YN+'"}';

			console.log("dsDetail : " + dsDetail);

			var dsFileList = '{}';
			var jsonParam = JSON.parse('{"ds_qna_dtl":'+dsParam+',"ds_qna_update": '+dsDetail+',"ds_filelist":""}');

			var validationCheck = false;
			
			validationCheck = validationCheckApproved();


			if (validationCheck == true) {
				fetch(insertQnaCommListUrl, {
				method: 'POST',
				headers: {
					"Content-type": "application/json"
				},
				body: JSON.stringify(jsonParam)
		        }).then(function(response) {
					var responseData = JSON.stringify(response);
					console.log("responseData : "+ JSON.stringify(responseData));

					alert.message.value = "등록되었습니다.";
					alert.layer.value = "Overlay";

		            return response.json();
		        }).then(function(jsonData) {

		        }).catch(function(err) {

		        });
			} else {

			}

			
		}

		function test () {
			console.log("test");
		}

		function qnaListDel () {
			var qnaListDel_URL = Backend.BASE_URL + Backend.qnaListDel_URL;

			console.log("qnaDetailValue.value.commSeq.value : " + qnaDetailValue.value.commSeq.value);


			var COMM_CLSS = "Q";
			var COMM_SEQ = qnaDetailValue.value.commSeq.value
			var FILE_SEQ = "";

			var dsParam = Backend.dsParam;

			console.log("dsParam : " + dsParam);



			var dsDetail = '{"commClss":"'+COMM_CLSS
						+'","commSeq":"'+COMM_SEQ
						+'","fileSeq":"'+FILE_SEQ
						+'"}';

			// console.log("dsDetail : " + dsDetail);

			// var dsFileList = '{}';
			var jsonParam = JSON.parse('{"ds_qna_dtl":'+dsParam+',"ds_qna_update": '+dsDetail+',"ds_filelist":""}');



			// deleteAlert.message.value = "삭제 되었습니다.";
			// deleteAlert.layer.value = "Overlay";

			fetch(qnaListDel_URL, {
				method: 'POST',
				headers: {
					"Content-type": "application/json"
				},
				body: JSON.stringify(jsonParam)
		        }).then(function(response) {
					var responseData = JSON.stringify(response);
					console.log("responseData : "+ JSON.stringify(responseData));

					deleteAlert.message.value = "삭제 되었습니다.";
					deleteAlert.layer.value = "Overlay";

		            return response.json();
		        }).then(function(jsonData) {

		        }).catch(function(err) {

		        });


		}
 
		var isItModifyVariable = Observable(true);

		function isItModifyTrue() {
			isItModifyVariable.value = true;
			console.log("isItModifyVariable.value : " + isItModifyVariable.value);
		}

		function isItModifyFalse() {
			isItModifyVariable.value = false;
			console.log("isItModifyVariable.value : " + isItModifyVariable.value);
		}

		module.exports = {
			type, selectedType, pickerOn, pickerOn2, pickerUp, pickerDown, getQnAList ,qnas, 
			selectedTypes,searchText, pageCount, totalPage, nextPage, pageCountInit, test,
			searchContent,getClickListValue, getDetailQnA, qnaDetailValue, pickerUp2, pickerDown2,
			qnaFileValue, isQuestion , sendData,detailDataClear, warnningText,  warnningOn, 
			pickerUp2, type2, selectedType2, confirmButtonAction, alert, unReg, 
			checkClick, unRegisteredChecked, simpleAlert,qnaListDel, deleteAlert, deleteAlertButtonAction,
			isQuestionAnswered, isFileAvailable, deleteAlertWithConfirmAndCancel, 
			deleteAlertWithConfirmAndCancelCalled, deleteAlertWithConfirmAndCancelCalledOff,
			cancelAlertWithConfirmAndCancel, cancelAlertWithConfirmAndCancelCalled, cancelAlertWithConfirmAndCancelCalledOff,
			isItModifyTrue, isItModifyFalse, isItModifyVariable, isMyQuestion
		};
	</JavaScript>

	<OnBackButton>

	</OnBackButton>

	<Panel ux:Name="page6BgPanel" Width="100%" Height="100%" Color="#ccc8" ZOffset="-1">
		<Clicked><Callback /></Clicked>
	</Panel>

	<WhileTrue Value="{pickerOn}">
		<Change page6PickerPanel.Y="0" Duration=".2" />
	</WhileTrue>

	<WhileTrue Value="{pickerOn2}">
		<Callback Handler="{test}" />
		<Change page7PickerPanel.Y="0" Duration=".2" />
	</WhileTrue>

	<DockPanel ux:Name="page7PickerPanel" Width="100%" Height="30%" Color="White" Alignment="Bottom" Y="100%">
		<Panel Dock="Top" Width="100%" Height="25%">
			<Text Value="확인" Alignment="CenterRight" Margin="{margin}" Color="#18f" FontSize="{margin}*1.2">
				<Clicked>
					<Callback Handler="{pickerDown2}" />
				</Clicked>
			</Text>

			<Rectangle Width="100%" Height="1" Color="#888" Alignment="Top" />
		</Panel>

		<MyPicker Data="{type2}" Selected="{selectedType2}" />
	</DockPanel>
	<Alert ux:Name="detailNoteAlert" Title="{simpleAlert.title}" MainText="{simpleAlert.message}" Type="{simpleAlert.type}" Layer="{simpleAlert.layer}" />

	<Rectangle Width="{margin}*23" Alignment="Center" Color="White" Layer="{alert.layer}">
		<Stroke Width="1" Color="Black" />
		<StackPanel>
			<Panel>
				<Text Value="{alert.title}" Alignment="CenterLeft" Margin="{margin}*4/3, {margin}/3" FontSize="{margin}" Color="White" />
				<Image File="Images/alert_top.png" Alignment="TopCenter" />
			</Panel>
			<Panel Margin="{margin}*5/7">
				<Text Value="{alert.message}" Alignment="Center" FontSize="{margin}" Color="#333" TextWrapping="Wrap" />
			</Panel>
			<Panel Margin="{margin}">
				<BlueButton>
					<Text Value="확인" Alignment="Center" Color="White" />
					<Clicked>
						<!-- <Callback Handler="{getListDetailNote}" />
						<Callback Handler="{viewWillAppear}" /> -->
						<Toggle Target="applyQuestion" />
						<Callback Handler="{confirmButtonAction}" />

					</Clicked>
				</BlueButton>
			</Panel>
		</StackPanel>
	</Rectangle>

	<Rectangle Width="{margin}*23" Alignment="Center" Color="White" Layer="{deleteAlert.layer}">
		<Stroke Width="1" Color="Black" />
		<StackPanel>
			<Panel>
				<Text Value="{deleteAlert.title}" Alignment="CenterLeft" Margin="{margin}*4/3, {margin}/3" FontSize="{margin}" Color="White" />
				<Image File="Images/alert_top.png" Alignment="TopCenter" />
			</Panel>
			<Panel Margin="{margin}*5/7">
				<Text Value="{deleteAlert.message}" Alignment="Center" FontSize="{margin}" Color="#333" TextWrapping="Wrap" />
			</Panel>
			<Panel Margin="{margin}">
				<BlueButton>
					<Text Value="확인" Alignment="Center" Color="White" />
					<Clicked>
						<!-- <Callback Handler="{getListDetailNote}" />
						<Callback Handler="{viewWillAppear}" /> -->
						<Toggle Target="showQuestion" />
						<Callback Handler="{deleteAlertButtonAction}" />
					</Clicked>
				</BlueButton>
			</Panel>
		</StackPanel>
	</Rectangle>






	<Rectangle Width="{margin}*23" Alignment="Center" Color="White" Layer="{deleteAlertWithConfirmAndCancel.layer}">
		<Stroke Width="1" Color="Black" />
		<StackPanel>
			<Panel>
				<Text Value="{deleteAlertWithConfirmAndCancel.title}" Alignment="CenterLeft" Margin="{margin}*4/3, {margin}/3" FontSize="{margin}" Color="White" />

				<Image File="Images/alert_top.png" Alignment="TopCenter" />
			</Panel>

			<Panel Margin="{margin}*5/7">
				<Text Value="{deleteAlertWithConfirmAndCancel.message}" Alignment="Center" FontSize="{margin}" Color="#333" TextWrapping="Wrap" />
			</Panel>

			<Panel Margin="{margin}">
				<Grid ColumnCount="2" CellSpacing="5">
					<BlueButton>
						<Text Value="확인" Alignment="Center" Color="White" />
						<Clicked>
							<Callback Handler="{qnaListDel}" />
						</Clicked>
					</BlueButton>

					<GrayButton>
						<Text Value="취소" Alignment="Center" Color="White" />
						<Clicked>
							<Callback Handler="{deleteAlertWithConfirmAndCancelCalledOff}" />
						</Clicked>
					</GrayButton>			
				</Grid>
			</Panel>
		</StackPanel>
	</Rectangle>


	<Rectangle Width="{margin}*23" Alignment="Center" Color="White" Layer="{cancelAlertWithConfirmAndCancel.layer}">
		<Stroke Width="1" Color="Black" />
		<StackPanel>
			<Panel>
				<Text Value="{cancelAlertWithConfirmAndCancel.title}" Alignment="CenterLeft" Margin="{margin}*4/3, {margin}/3" FontSize="{margin}" Color="White" />

				<Image File="Images/alert_top.png" Alignment="TopCenter" />
			</Panel>

			<Panel Margin="{margin}*5/7">
				<Text Value="{cancelAlertWithConfirmAndCancel.message}" Alignment="Center" FontSize="{margin}" Color="#333" TextWrapping="Wrap" />
			</Panel>

			<Panel Margin="{margin}">
				<Grid ColumnCount="2" CellSpacing="5">
					<BlueButton>
						<Text Value="확인" Alignment="Center" Color="White" />
						<Clicked>
							<Callback Handler="{selectedTypes}" />	
							<Callback Handler="{pickerDown}" />
							<Callback Handler="{cancelAlertWithConfirmAndCancelCalledOff}" />
							<Toggle Target="applyQuestion" />
						</Clicked>
					</BlueButton>

					<GrayButton>
						<Text Value="취소" Alignment="Center" Color="White" />
						<Clicked>
							<Callback Handler="{cancelAlertWithConfirmAndCancelCalledOff}" />
						</Clicked>
					</GrayButton>			
				</Grid>
			</Panel>
		</StackPanel>
	</Rectangle>
	
	<!-- 새로 등록 정보 -->
	<DockPanel Width="100%" X="100%" Color="White">
		<Panel Dock="Top">
			<Grid ColumnCount="3" Columns="1*, 7*, 1*" Margin="{margin}">
				<Image File="Images/btn_pre.png" Alignment="Left">
					<Clicked>
						<Callback Handler="{selectedTypes}" />	
						<Callback Handler="{pickerDown}" />
						<Toggle Target="applyQuestion" />
					</Clicked>
				</Image>

				<Text Value="서울시어린이집회계" FontSize="{margin}*1.4" Color="White" Alignment="Center" />

				<Image File="Images/btn_home.png">
					<Clicked>
						<Toggle Target="applyQuestion" />
						<Callback Handler="{pageCountInit}" />
						<Callback Handler="{selectedTypes}" />	
						<Callback Handler="{pickerDown}" />
						<Callback Handler="{goMainPageFromAnywhere}" />
					</Clicked>
				</Image>
			</Grid>

			<Rectangle Width="100%" Color="#527BD8" BoxSizing="FillAspect" Aspect="5.5">
				<Rectangle Width="100%" Color="#4069C2" Height="3" Alignment="Bottom" />
			</Rectangle>
		</Panel>

		<Grid ColumnCount="1" Rows="Auto" Dock="Top" Color="#FFF">
			<!-- <WrapPanel Margin="{margin}" Alignment="CenterLeft">
				<Circle Width="{margin}/2" Height="{margin}/2" Color="Black" Alignment="Center" Y="-10%" Margin="0, 0, {margin}/2, 0" />
				<Text Value="질의응답" FontSize="{margin}*1.2" Color="Black" />
			</WrapPanel> -->

			<Grid Columns="2*, 3*">
				<WrapPanel Margin="{margin}" Alignment="CenterLeft">
					<Circle Width="{margin}/2" Height="{margin}/2" Color="Black" Alignment="Center" Y="-10%" Margin="0, 0, {margin}/2, 0" />
					<Text Value="질의응답" FontSize="{margin}*1.2" Color="Black" />
				</WrapPanel>

				<Panel Width="80%" Alignment="CenterRight">
					<!-- <Text Value="전체" Color="Black" FontSize="{margin}" Alignment="CenterLeft" Margin="{margin}*2, 0" /> -->
					<Text Value="{selectedType2}" Color="Black" FontSize="{margin}" Alignment="CenterLeft" Margin="{margin}*2, 0" />
					<Image File="Images/bg_select2.png" Margin="{margin}" />
					<Clicked>
						<Callback Handler="{pickerUp2}" />
					</Clicked>

				</Panel>
			</Grid>


			<Rectangle Width="100%" Color="#708EAE">

				<WhileTrue Value="{warnningOn}">
					<TextView Value="{warnningText}" Margin="{margin}" TextColor="White" FontSize="{margin}*0.8" TextWrapping="Wrap"/>
				</WhileTrue>

				<WhileFalse Value="{warnningOn}">
					<Text Value="{qnaDetailValue.writerNm}" Margin="{margin}" Color="White"/>
				</WhileFalse>
			</Rectangle>
		</Grid>

		<Grid Color="#ccc" CellSpacing="1" Rows="1.3*, 6*, 1.3*">
		<!-- <Grid Color="#ccc" CellSpacing="1" Rows="Auto"> -->
			<Panel Color="White" Height="{margin}*4.5">
				<TextBox Value="{qnaDetailValue.title}" Margin="{margin}" PlaceholderText="제목을 입력하세요" />
			</Panel>
			<Panel Color="White">
				<TextBox Value="{qnaDetailValue.cont}" Margin="{margin}" PlaceholderText="내용을 입력하세요" Width="100%" MaxWidth="100%" TextWrapping="Wrap" />
			</Panel>

			<!-- <Panel Dock="Bottom" Width="100%" Color="#5079DB" Height="{margin}*5"> -->
			<Panel Dock="Bottom" Width="100%" Color="#5079DB">
				<Grid ColumnCount="2" Margin="{margin}" CellSpacing="5" Rows="Auto">
					<!-- <Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" />
					<Text Value="업로드 이미지 없음" Color="White" FontSize="{margin}*0.8" Alignment="CenterRight" />
					<Rectangle Width="100%" Color="White" ColumnSpan="2">
						<StackPanel>
							<Each Items="{qnaFileValue}">
									<WrapPanel>
										<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
										<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
										<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
									</WrapPanel>
								</Each>
						</StackPanel>
					</Rectangle> -->
					<GrayButton2>
						<Text Value="취소" Color="White" Alignment="Center" />
						<Clicked>
							<!-- <Callback Handler="{selectedTypes}" />	
							<Callback Handler="{pickerDown}" />
							<Toggle Target="applyQuestion" /> -->
							<Callback Handler="{cancelAlertWithConfirmAndCancelCalled}" />
						</Clicked>
					</GrayButton2>

					<WhileTrue Value="{isItModifyVariable}">
						<OrangeButton>
							<Text Value="수정" Color="White" Alignment="Center" />
							<Clicked>
								<Callback Handler="{sendData}" />
							</Clicked>
						</OrangeButton>
					</WhileTrue>

					<WhileFalse Value="{isItModifyVariable}">
						<OrangeButton>
							<Text Value="등록" Color="White" Alignment="Center" />
							<Clicked>
								<Callback Handler="{sendData}" />
							</Clicked>
						</OrangeButton>
					</WhileFalse>


				</Grid>
			</Panel>
		</Grid>

		

		<WhileTrue ux:Name="applyQuestion">
			<Move X="-1" RelativeTo="Size" />
		</WhileTrue>
	</DockPanel>

	<!--상세보기 문의하기 화면  -->
	<DockPanel Width="100%" Height="100%" X="100%" Color="White">
		<Panel Dock="Top">
			<Grid ColumnCount="3" Columns="1*, 7*, 1*" Margin="{margin}">
				<Image File="Images/btn_pre.png" Alignment="Left">
					<Clicked>
						<Callback Handler="{selectedTypes}" />	
						<Callback Handler="{pickerDown}" />
						<Toggle Target="showQuestion" />
					</Clicked>
				</Image>

				<Text Value="서울시어린이집회계" FontSize="{margin}*1.4" Color="White" Alignment="Center" />

				<Image File="Images/btn_home.png">
					<Clicked>
						<Toggle Target="showQuestion" />
						<Callback Handler="{pageCountInit}" />
						<Callback Handler="{selectedTypes}" />	
						<Callback Handler="{pickerDown}" />
						<Toggle Target="showQuestion" />
						<Callback Handler="{goMainPageFromAnywhere}" />
					</Clicked>
				</Image>
			</Grid>

			<Rectangle Width="100%" Color="#527BD8" BoxSizing="FillAspect" Aspect="5.5">
				<Rectangle Width="100%" Color="#4069C2" Height="3" Alignment="Bottom" />
			</Rectangle>
		</Panel>

		<WhileTrue Value="{isQuestion}">
			<Grid ColumnCount="1" Rows="Auto" Dock="Top" Color="#FFF">
				<WrapPanel Margin="{margin}" Alignment="CenterLeft">
					<Circle Width="{margin}/2" Height="{margin}/2" Color="Black" Alignment="Center" Y="-10%" Margin="0, 0, {margin}/2, 0" />
					<Text Value="질의응답(질문보기)" FontSize="{margin}*1.2" Color="Black" />
				</WrapPanel>

				<Rectangle Width="100%" Height="1" Color="#3E66C5" />
			</Grid>
		</WhileTrue>

		<WhileFalse Value="{isQuestion}">
			<Grid ColumnCount="1" Rows="Auto" Dock="Top" Color="#FFF">
				<WrapPanel Margin="{margin}" Alignment="CenterLeft">
					<Circle Width="{margin}/2" Height="{margin}/2" Color="Black" Alignment="Center" Y="-10%" Margin="0, 0, {margin}/2, 0" />
					<Text Value="질의응답(답변보기)" FontSize="{margin}*1.2" Color="Black" />
				</WrapPanel>

				<Rectangle Width="100%" Height="1" Color="#3E66C5" />
			</Grid>
		</WhileFalse>

		<WhileTrue Value="{isFileAvailable}">
			<Grid Color="#ccc" CellSpacing="1" Rows="Auto">
			<!-- <Grid Color="#ccc" CellSpacing="1" Rows="1.3*, 6*, 1.3*"> -->
				<Panel Color="White" Width="100%" Height="100%">
					<StackPanel Margin="{margin}">
						<Text Value="{qnaDetailValue.title}" FontSize="{margin}*1.2" Color="Black" TextWrapping="Wrap" />
						<Text Value="{qnaDetailValue.writerNm}" FontSize="{margin}*1.2" Color="#4395D6" />
						<Text Value="{qnaDetailValue.regDate1} {qnaDetailValue.regDate2}"  Color="#888" />
					</StackPanel>
				</Panel>
				<Panel Color="White">
					<ScrollView>
						<StackPanel>
							<Text Value="{qnaDetailValue.cont}" Margin="{margin}" TextWrapping="Wrap" />
						</StackPanel>
					</ScrollView>
				</Panel>

				<WhileFalse Value="{isQuestion}">
					<Panel Width="100%" Color="#5079DB">
						<Grid ColumnCount="1" Margin="{margin}" CellSpacing="5" Rows="Auto">
							<Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" ColumnSpan="2" />
							<Rectangle Width="100%" Color="White" ColumnSpan="2" >
								<StackPanel>
									<Each Items="{qnaFileValue}">
											<WrapPanel>
												<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
												<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
												<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
											</WrapPanel>
										</Each>
								</StackPanel>
							</Rectangle>

							<GrayButton2>
								<Text Value="삭제" Alignment="Center" Color="White" />
								<Clicked>
									<!-- <Callback Handler="{selectedTypes}" />	
									<Callback Handler="{pickerDown}" />
									<Toggle Target="showQuestion" /> -->
									<Callback Handler="{deleteAlertWithConfirmAndCancelCalled}" />

								</Clicked>
							</GrayButton2>
							<!-- 상세정보 수정화면 가기 -->
							
								<!-- <OrangeButton>
									<Text Value="수정" Alignment="Center" Color="White" />
									<Clicked>
										<Toggle Target="applyQuestion" />
										
									</Clicked>
								</OrangeButton> -->
							
						</Grid>
					</Panel>
				</WhileFalse>

				<WhileTrue Value="{isQuestion}">
					<Panel Width="100%" Color="#5079DB">
						<WhileFalse Value="{isQuestionAnswered}">
							<Grid ColumnCount="2" Margin="{margin}" CellSpacing="5" Rows="Auto">
								<Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" ColumnSpan="2" />
								<Rectangle Width="100%" Color="White" ColumnSpan="2" >
									<StackPanel>
										<Each Items="{qnaFileValue}">
												<WrapPanel>
													<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
													<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
													<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
												</WrapPanel>
											</Each>
									</StackPanel>
								</Rectangle>
								<GrayButton2>
									<Text Value="삭제" Alignment="Center" Color="White" />
									<Clicked>
										<!-- <Callback Handler="{selectedTypes}" />	
										<Callback Handler="{pickerDown}" />
										<Toggle Target="showQuestion" /> -->
										<Callback Handler="{deleteAlertWithConfirmAndCancelCalled}" />

									</Clicked>
								</GrayButton2>
								<!-- 상세정보 수정화면 가기 -->
								
									<OrangeButton>
										<Text Value="수정" Alignment="Center" Color="White" />
										<Clicked>
											<Toggle Target="applyQuestion" />
											<!-- <Callback Handler="{isItModifyTrue}" /> -->
											<Callback Handler="{isItModifyTrue}" />
										</Clicked>
									</OrangeButton>
								
							</Grid>
						</WhileFalse>
						
						<WhileTrue Value="{isQuestionAnswered}"> 
							<Grid ColumnCount="1" Margin="{margin}" CellSpacing="5">
								<Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" ColumnSpan="2" />
								<Rectangle Width="100%" Color="White" ColumnSpan="2" >
									<StackPanel>
										<Each Items="{qnaFileValue}">
												<WrapPanel>
													<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
													<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
													<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
												</WrapPanel>
											</Each>
									</StackPanel>
								</Rectangle>
								<GrayButton2>
									<Text Value="삭제" Alignment="Center" Color="White" />
									<Clicked>
										<!-- <Callback Handler="{selectedTypes}" />	
										<Callback Handler="{pickerDown}" />
										<Toggle Target="showQuestion" /> -->
										<Callback Handler="{deleteAlertWithConfirmAndCancelCalled}" />

									</Clicked>
								</GrayButton2>
								<!-- 상세정보 수정화면 가기 -->
								
								<!-- <OrangeButton>
									<Text Value="수정" Alignment="Center" Color="White" />
									<Clicked>
										<Toggle Target="applyQuestion" />
										
									</Clicked>
								</OrangeButton> -->
							</Grid>
						</WhileTrue>
					</Panel>
				</WhileTrue>
			</Grid>
		</WhileTrue>

		<WhileFalse Value="{isFileAvailable}">
			<!-- <Grid Color="#ccc" CellSpacing="1" Rows="Auto"> -->
			<Grid Color="#ccc" CellSpacing="1" Rows="1.3*, 6*, 1.3*">
				<Panel Color="White" Width="100%" Height="100%">
					<StackPanel Margin="{margin}">
						<Text Value="{qnaDetailValue.title}" FontSize="{margin}*1.2" Color="Black" TextWrapping="Wrap" />
						<Text Value="{qnaDetailValue.writerNm}" FontSize="{margin}*1.2" Color="#4395D6" />
						<!-- <Text Value="{qnaDetailValue.writerNm}" FontSize="{margin}*1.2" Color="#d643bb" /> -->
						<Text Value="{qnaDetailValue.regDate1} {qnaDetailValue.regDate2}"  Color="#888" />
					</StackPanel>
				</Panel>
				<Panel Color="White">
					<ScrollView>
						<StackPanel>
							<Text Value="{qnaDetailValue.cont}" Margin="{margin}" TextWrapping="Wrap" />
						</StackPanel>
					</ScrollView>
				</Panel>

				<WhileFalse Value="{isQuestion}">
					<Panel Width="100%" Color="#5079DB">
						<Grid ColumnCount="1" Margin="{margin}" CellSpacing="5">
							<!-- <Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" ColumnSpan="2" />
							<Rectangle Width="100%" Color="White" ColumnSpan="2" >
								<StackPanel>
									<Each Items="{qnaFileValue}">
											<WrapPanel>
												<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
												<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
												<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
											</WrapPanel>
										</Each>
								</StackPanel>
							</Rectangle> -->
							<!-- <GrayButton2>
								<Text Value="삭제" Alignment="Center" Color="White" />
								<Clicked>
									<Callback Handler="{selectedTypes}" />	
									<Callback Handler="{pickerDown}" />
									<Toggle Target="showQuestion" />
									<Callback Handler="{qnaListDel}" />

								</Clicked>
							</GrayButton2> -->
							<!-- 상세정보 수정화면 가기 -->
							
							<OrangeButton>
								<Text Value="목록" Alignment="Center" Color="White" />
								<Clicked>
									<Toggle Target="showQuestion" />
								</Clicked>
							</OrangeButton>
						</Grid>
					</Panel>
				</WhileFalse>

				<WhileTrue Value="{isQuestion}">
					<Panel Width="100%" Color="#5079DB">
						<WhileFalse Value="{isQuestionAnswered}">
							<Grid ColumnCount="2" Margin="{margin}" CellSpacing="5">
								<!-- <Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" ColumnSpan="2" />
								<Rectangle Width="100%" Color="White" ColumnSpan="2" >
									<StackPanel>
										<Each Items="{qnaFileValue}">
												<WrapPanel>
													<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
													<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
													<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
												</WrapPanel>
											</Each>
									</StackPanel>
								</Rectangle> -->
								<GrayButton2>
									<Text Value="삭제" Alignment="Center" Color="White" />
									<Clicked>
										<!-- <Callback Handler="{selectedTypes}" />	
										<Callback Handler="{pickerDown}" />
										<Toggle Target="showQuestion" /> -->
										<Callback Handler="{deleteAlertWithConfirmAndCancelCalled}" />

									</Clicked>
								</GrayButton2>
								<!-- 상세정보 수정화면 가기 -->
								
									<OrangeButton>
										<Text Value="수정" Alignment="Center" Color="White" />
										<Clicked>
											<Toggle Target="applyQuestion" />
											<Callback Handler="{isItModifyTrue}" />
										</Clicked>
								</OrangeButton>
								
							</Grid>
						</WhileFalse>
						
						<WhileTrue Value="{isQuestionAnswered}"> 
							<Grid ColumnCount="1" Margin="{margin}" CellSpacing="5">
								<!-- <Text Value="파일첨부" Color="White" FontSize="{margin}*0.8" Alignment="CenterLeft" ColumnSpan="2" />
								<Rectangle Width="100%" Color="White" ColumnSpan="2" >
									<StackPanel>
										<Each Items="{qnaFileValue}">
												<WrapPanel>
													<Image File="Images/ico_down.png" Alignment="Center" Margin="{margin}/2" Width="{margin}" />
													<Text Value="{qnaFileValue.fileNm}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
													<Text Value="{qnaFileValue.fileSize}" FontSize="{margin}*0.7" Color="#888" Alignment="CenterLeft" TextWrapping="Wrap" />
												</WrapPanel>
											</Each>
									</StackPanel>
								</Rectangle>
								<GrayButton2>
									<Text Value="삭제" Alignment="Center" Color="White" />
									<Clicked>
										<Callback Handler="{selectedTypes}" />	
										<Callback Handler="{pickerDown}" />
										<Toggle Target="showQuestion" />
										<Callback Handler="{qnaListDel}" />

									</Clicked>
								</GrayButton2>
								상세정보 수정화면 가기 -->
								
								<OrangeButton>
									<Text Value="목록" Alignment="Center" Color="White" />
									<Clicked>
										<Toggle Target="showQuestion" />
										
									</Clicked>
								</OrangeButton>
							</Grid>
						</WhileTrue>
					</Panel>
				</WhileTrue>
			</Grid>
		</WhileFalse>

		<WhileTrue ux:Name="showQuestion">
			<Move X="-1" RelativeTo="Size" />
		</WhileTrue>
	</DockPanel>

	<DockPanel ux:Name="page5PickerPanel" Width="100%" Height="30%" Color="White" Alignment="Bottom" Y="100%">
		<Panel Dock="Top" Width="100%" Height="25%">
			<Text Value="확인" Alignment="CenterRight" Margin="{margin}" Color="#18f" FontSize="{margin}*1.2">
				<Clicked>
					<Callback Handler="{pickerDown}" />
				</Clicked>
			</Text>

			<Rectangle Width="100%" Height="1" Color="#888" Alignment="Top" />
		</Panel>

		<MyPicker Data="{type}" Selected="{selectedType}" />
	</DockPanel>
	<!-- 처음 화면 데이터 구성 -->
	<StackPanel ux:InnerClass="qnas" Width="100%" Color="White">
		<Grid Alignment="Center" ColumnCount="2" Columns="7*, 2*" Margin="{margin}" Width="100%" >
			<Grid ColumnCount="1" RowCount="2" Rows="Auto" CellSpacing="3">
				<WrapPanel Alignment="CenterLeft" Width="100%">
					<WhileTrue Value="{complete}">
						<Rectangle CornerRadius="100" Color="#f80" Alignment="Center">
							<Text Value="등록완료" FontSize="{margin}*0.8" Color="White" Margin="5, 3, 5, 1" Alignment="Center" />
						</Rectangle>
					</WhileTrue>
					<Text Value="{writerNm}" FontSize="{margin}*0.8" Alignment="Center" />
				</WrapPanel>

				<Text Value="{title}" TextWrapping="Wrap" Alignment="CenterLeft" />
			</Grid>

			<Grid ColumnCount="1" RowCount="2">
				<Text Value="{regDate1}" FontSize="{margin}" Color="#888" Alignment="CenterRight" />
				<Text Value="{regDate2}" FontSize="{margin}" Color="#888" Alignment="CenterRight" />
			</Grid>
		</Grid>

		<Clicked>
			<Callback Handler="{getClickListValue}" />
			<Toggle Target="showQuestion" />
		</Clicked>
	</StackPanel>
	<!-- 페이지 상단 구성 -->
	<DockPanel ux:Name="page6PickerPanel" Width="100%" Height="30%" Color="White" Alignment="Bottom" Y="100%">
		<Panel Dock="Top" Width="100%" Height="25%">
			<Text Value="확인" Alignment="CenterRight" Margin="{margin}" Color="#18f" FontSize="{margin}*1.2">
				<Clicked>
					<Callback Handler="{pickerDown}" />
				</Clicked>
			</Text>

			<Rectangle Width="100%" Height="1" Color="#888" Alignment="Top" />
		</Panel>

		<MyPicker Data="{type}" Selected="{selectedType}" />
	</DockPanel>




	<DockPanel Color="White">
		<Panel Dock="Top">
			<Grid ColumnCount="3" Columns="1*, 7*, 1*" Margin="{margin}">
				<Image File="Images/btn_pre.png" Alignment="Left">
					<Clicked>
						<Callback Handler="{pageCountInit}" />
						<Callback Handler="{selectedTypes}" />	
						<Callback Handler="{pickerDown}" />
						<Callback Handler="{detailDataClear}" />
						<Callback Handler="{goBackToPrevious}" />
					</Clicked>
				</Image>

				<Text Value="서울시어린이집회계" FontSize="{margin}*1.4" Color="White" Alignment="Center"/>

				<Image File="Images/btn_home.png">
					<Clicked>
						<Callback Handler="{pageCountInit}" />
						<Callback Handler="{selectedTypes}" />	
						<Callback Handler="{pickerDown}" />
						<Callback Handler="{detailDataClear}" />
						<Callback Handler="{goMainPageFromAnywhere}" />
					</Clicked>
				</Image>
			</Grid>
			<Rectangle Width="100%" Color="#527BD8" BoxSizing="FillAspect" Aspect="5.5">
				<Rectangle Width="100%" Color="#4069C2" Height="3" Alignment="Bottom" />
			</Rectangle>
		</Panel>

		<Grid Columns="3*, 1*" Dock="Top">
			<WrapPanel Margin="{margin}" Alignment="CenterLeft" Dock="Top">
				<Circle Width="{margin}/2" Height="{margin}/2" Color="Black" Alignment="Center" Y="-10%" Margin="0, 0, {margin}/2, 0" />
				<Text Value="질의응답" FontSize="{margin}*1.2" Color="Black" />
			</WrapPanel>

			<Rectangle Width="100%" Height="100%"  Color="#F17E22" CornerRadius="5" Alignment="Center" Margin="{margin}, {margin}/2">
				<Clicked>
					<Callback Handler="{detailDataClear}" />
					<Callback Handler="{selectedTypes}" />	
					<Callback Handler="{pickerDown}" />
					<Callback Handler="{isItModifyFalse}" />
					<Toggle Target="applyQuestion" />
				</Clicked>
				<Text Value="문의하기" Color="White" FontSize="{margin}" Alignment="Center"/>
			</Rectangle>
		</Grid>
		

		<Panel Color="#5771AA" Height="{margin}*4" Dock="Top">
			<Grid ColumnCount="4" Columns="2*, 4*, 2*, 2*" Margin="{margin}" Width="100%" CellSpacing="{margin}/2">
				<Rectangle Width="100%" Height="100%" Color="#FFF">
					<Stroke Width="2" Color="#888" />
					<Clicked>
						<Callback Handler="{pickerUp}" />
					</Clicked>

					<Text Value="{selectedType}" FontSize="{margin}" Margin="{margin}/2, 0" Alignment="CenterLeft" />

					<Image File="Images/ico_select.png" Width="20" Height="10" Alignment="CenterRight" Margin="5" />
				</Rectangle>
				
				<Rectangle Width="100%" Height="100%" Color="#FFF">
					<Stroke Width="2" Color="#888" />
					<TextBox Height="100%" Width="100%" Background="White" Value="{searchText}" />
				</Rectangle>

				<Rectangle Width="100%" Height="100%" Color="#3477BE" Alignment="CenterLeft">
					<Text Value="검색" Alignment="Center" Color="White">
						<Clicked>
							<Callback Handler="{searchContent}" />
						</Clicked>
					</Text>
				</Rectangle>
				<Rectangle Width="100%" Height="100%">
					<Grid ColumnCount="2" Columns="1*, 1*" CellSpacing="{margin}/2" Width="100%">
						<Panel Alignment="Left">
							<Clicked>
								<Callback Handler="{checkClick}" />
								<Callback Handler="{unRegisteredChecked}" />
							</Clicked>

							<Image ux:Name="fm_checked" File="Images/fm_checked.png" Opacity="0" />
							<Image ux:Name="fm_check" File="Images/fm_check.png" />

							<WhileTrue Value="{unReg}">
								<Change fm_checked.Opacity="1" />
								<Change fm_check.Opacity="0" />
								
							</WhileTrue>
						</Panel>
						<Text Value="내 글" FontSize="{margin}*0.9" Color="White" Alignment="CenterLeft" />
					</Grid>
				</Rectangle>
			</Grid>
		</Panel>

		<ScrollView ux:Name="qnaScroll" SnapMaxTransform="false" SnapMinTransform="false">
			<StackPanel Color="#ddd" ItemSpacing="1">
				<Each Items="{qnas}">
					<qnas />
				</Each>
				<Grid ColumnCount="2" Columns="4*, 1*" Height="60" Color="#ddd" CellSpacing="2">
					<Panel Width="100%" Height="100%" Color="#fcfcfc">
						<Text Value="더보기({pageCount}/{totalPage})" Alignment="Center" />
						<Clicked><Callback Handler="{nextPage}"/></Clicked>
					</Panel>

					<Panel Width="100%" Height="100%" Color="#fcfcfc">
						<Text Value="맨위로" Alignment="Center" />
						<Clicked>
							<Set Target="qnaScroll.ScrollPosition" Value="0" />
						</Clicked>
					</Panel>
				</Grid>
			</StackPanel>
		</ScrollView>
	</DockPanel>
</Page>