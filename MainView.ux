<!-- <App> -->
<App ux:AutoCtor="false">
	<Router ux:Name="router" />

	<JavaScript>
		var Observable = require('FuseJS/Observable');
		var Environment = require('FuseJS/Environment');
		var FileSystem = require("FuseJS/FileSystem");
		var Camera = require('FuseJS/Camera');
		var CameraRoll = require('FuseJS/CameraRoll');
		var ImageTools = require('FuseJS/ImageTools');
		var Uploader = require("Uploader");
		var Backend = require('Backend.js');
		
		var print = debug_log;
		 "/acusr/acc/bil/MobileReceiptImgUpload.do"

		// var uploadUrl = 'http://61.97.121.199:8080/TEST/ImgUploadTest.jsp';// 서버 IP를 변경하세요.

		var uploadUrl = Backend.BASE_URL + "/acusr/acc/bil/MobileReceiptImgUpload.do" ;// 서버 IP를 변경하세요.

		var sendPictureBtnEnabled = Observable(false);
		var targetImgPath = Observable();
		var takedPicture = Observable();
		var dateTime = "";



		function getDatesInString () {
			var today = new Date();
			var yearInString = today.getFullYear().toString();
			var monthInString = "";
			var dateInString = "";
			var hourInString = "";
			var minuteInString = "";
			var secondInString = ""; 

			if( (today.getMonth()+1) < 10 ) {
				monthInString = "0" + (today.getMonth()+1).toString();
			} else {
				monthInString = (today.getMonth()+1).toString();
			}
			
			if(today.getDate() < 10) {
				dateInString = "0" +today.getDate().toString();
			}else {
				dateInString = today.getDate().toString();
			}

			if (today.getHours() < 10) {
				hourInString = "0" +  today.getHours().toString();
			} else {
				hourInString = today.getHours().toString();
			}

			if (today.getMinutes() < 10) {
				minuteInString = "0" +  today.getMinutes().toString();
			} else {
				minuteInString = today.getMinutes().toString();
			}

			if (today.getSeconds() < 10) {
				secondInString = "0" +  today.getSeconds().toString();
			} else {
				secondInString = today.getSeconds().toString();
			}

    		var date = yearInString + "-" + monthInString + "-" + dateInString;
			var time = hourInString + "-" + minuteInString + "-" + secondInString;
			var dateTime = date+'-'+time;

			return dateTime;
		}

		function getDaysInString () { 
			var today = new Date();
			var yearInString = today.getFullYear().toString();
			var monthInString = "";
			

			if( (today.getMonth()+1) < 10 ) {
				monthInString = "0" + (today.getMonth()+1).toString();
			} else {
				monthInString = (today.getMonth()+1).toString();
			}
			
			if(today.getDate() < 10) {
				dateInString = "0" +today.getDate().toString();
			}else {
				dateInString = today.getDate().toString();
			}

			var date = yearInString + "-" + monthInString + "-" + dateInString;
			return date;
		}



		function takePicture()
		{
			dateTime = getDatesInString();			

			Camera.takePicture().then(function(image)
			{
				// 찍은 사진 리사이징하기
				// 이미지 사이즈 다시 줄이실 때는 아래 두줄 주석 지우세요.
				// var args = { desiredWidth:480, desiredHeight:640 , mode:ImageTools.SCALE_AND_CROP, performInPlace:true };
				// ImageTools.resize(image, args).then(function(resizedImage) {
					// 리사이징한 사진 savepanel3에 표시
					// 다시 사이즈 줄이실 때는 image.path 를 resizedImage.path로 바꾸세요.
					takedPicture.value = image.path;
					// targetImgPath.value = resizedImage.path;
					sendPictureBtnEnabled.value = true;
					// 리사이징한 사진 저정부분은 삭제
					// CameraRoll.publishImage(resizedImage);
					// console.log("picture was saved");

					// 리사이징한 이미지 흑백으로 변환
					

					console.log("dateTime : " + dateTime);

					// var imageName = dateTime + ".png";
					var imageName = dateTime + ".jpg";
					console.log("Image Name : " + imageName);

					savepanel3.save(imageName);
					console.log("make image");
					var saveDir = "";
					if (Environment.ios) {
						saveDir = FileSystem.iosPaths.documents;
					} else if (Environment.android) {
						// console.log(FileSystem.androidPaths.files);
						saveDir = FileSystem.androidPaths.files;
					}
					var arrayBuff;

					console.log("saveDir : " +saveDir);
					
					setTimeout(function() {

						


						FileSystem.readBufferFromFile(saveDir+"/"+imageName).then(function(image) {
							console.log("read success");
							arrayBuff = image;
							// console.log(JSON.stringify(arrayBuff));
							ImageTools.getImageFromBuffer(arrayBuff).then(function(image) {
								console.log("Scratch image path is: " + image.path);
								// 흑백으로 변한사진 카메라롤에 저장
								CameraRoll.publishImage(image).then(function(x) {
									console.log("save success");
									targetImgPath.value = saveDir + "/"+imageName;
									sendPicture();
									

									// FileSystem.delete(saveDir+"/"+imageName).then(function() {
									// 	console.log("delete success");
									// });
									
									// takedPicture.value = "";
								}, function(error) {
									console.log("error : " );
								});
							});
						}, function(error) {
							console.log(error);
						});
					}, 2000);

					// sendPicture();
				// 이미지 사이즈 다시 줄이실 때는 아래 세줄 주석 지우세요.
				// }).catch(function(reason) {
				// 	console.log("Couldn't resize image: " + reason);
				// });
			}).catch(function(reason) {
				console.log("Couldn't take picture: " + reason);
			});
		};

		function sendPicture()
		{
			
			var atchmnfl_ym = getDaysInString();


			console.log("sendPicture was called");
			// var dsParam = '{"GVAREACODE":"11110","GVBOOKGB":"01","GVESTIYEAR" :"2017","GVMEMCODE" :"SEOUL000000000000121","GVMEMID":"9999990","GVORGCLSS":"5","GVUSERCLSS" :"3"}';
			var dsSearch = '{"ATCHMNFL_YM":"'+atchmnfl_ym+'","FILE_SE":"N","DOWN_LVL":"ALL"}';
			console.log("===========================================");
			console.log("searchContent ds Search : " + dsSearch);

			// var jsonParam = JSON.parse('{"dsParam":'+Backend.dsParam+',"ds_search": '+dsSearch+'}');

			// console.log("2018.01.05 jsonParam : " + JSON.stringify(jsonParam));


			var gvmemcode = JSON.parse(Backend.dsParam).GVMEMCODE;
			console.log("gvmemcode : " + gvmemcode);






			Uploader.send(targetImgPath.value, uploadUrl, Backend.dsParam, dsSearch, gvmemcode,  atchmnfl_ym, "N", "ALL").then(function(response) {
				console.log("upload complete.");
				console.log(JSON.stringify(response));
			});
		}


		function getImage() {
			CameraRoll.getImage().then(function(image) {
				takedPicture.value = image.path;
				sendPictureBtnEnabled.value = true;

				var today = new Date();
	    		var date = today.getFullYear()+''+(today.getMonth()+1)+''+today.getDate();
				var time = today.getHours() + "" + today.getMinutes() + "" + today.getSeconds();
				var dateTime = date+''+time;
				var imageName = dateTime + ".png";
				savepanel3.save(imageName);
				var saveDir = "";
				if (Environment.ios) {
					saveDir = FileSystem.iosPaths.documents;
				} else if (Environment.android) {
					saveDir = FileSystem.androidPaths.files;
				}

				setTimeout(function() {
					targetImgPath.value = saveDir + "/"+imageName;
					sendPicture();
					

					FileSystem.delete(saveDir+"/"+imageName).then(function() {
						console.log("delete success");
					});
					
					takedPicture.value = "";
				}, 6000);
			}).catch(function(reason) {
				console.log("Couldn't get image: "+reason);
			});
		};

		var margin = Observable();

		function placed(args) {
			margin.value = args.width / 25;
		}

		module.exports = {
			goBackToPrevious: function() {
				router.getRoute(function(route) {
					console.log("goBackToPrevious From " + route[0]);
					if (route[0] == "NoteManage") {
						router.goto("MainPage");
					} else if (route[0] == "DetailNote") {
						router.goto("NoteManage");
					} else if (route[0] == "ShowFile") {
						router.goto("DetailNote");
					} else if (route[0] == "ChoiceSubject") {
						router.goto("DetailNote");
					} else if (route[0] == "Notice") {
						router.goto("MainPage");
					} else if (route[0] == "ApplyEdu") {
						router.goto("MainPage");
					} else if (route[0] == "QnA") {
						router.goto("MainPage");
					} else {
						router.goBack();
					}
				});
				// console.log("goBackToPrevious");
				// router.goBack();
			},
			goNoteManage: function() {
				router.push("NoteManage");
			},

			goMainPageFromAnywhere:function () {
				router.goto("MainPage");
			},

			goPhotoCollection: function() {
				router.push("PhotoCollection", {type: "normal"});
			},
			goNotice: function() {
				router.goto("Notice");
			},
			goApplyEdu: function() {
				router.push("ApplyEdu");
			},
			goQnA: function() {
				router.push("QnA");
			},
			goRecieveWork: function() {
				router.push("RecieveWork");
			},
			goSendWork: function() {
				router.push("SendWork");
			},
			goTrash: function() {
				router.push("Trash");
			},
			takePicture,
			getImage, placed, margin,



			targetImgPath,
			sendPicture,
			sendPictureBtnEnabled, takedPicture
		};
	</JavaScript>

	<Uploader ux:Global="Uploader" />


	<Panel ux:Class="topBar">
		<Grid ColumnCount="3" Columns="1*, 7*, 1*" Margin="{margin}">
			<Image File="Images/btn_pre.png" Alignment="Left">
				<Clicked>
					<Callback Handler="{goBackToPrevious}" />
				</Clicked>
			</Image>

			<Text Value="서울시어린이집회계" FontSize="{margin}*1.4" Color="White" Alignment="Center" />

			<Image File="Images/btn_home.png">
				<Clicked>
					<Callback Handler="{goMainPageFromAnywhere}" />
				</Clicked>
			</Image>
		</Grid>

		<Rectangle Width="100%" Color="#527BD8" BoxSizing="FillAspect" Aspect="5.5">
			<Rectangle Width="100%" Color="#4069C2" Height="3" Alignment="Bottom" />
		</Rectangle>
	</Panel>

	<Rectangle ux:Class="BlueButton" ux:Name="BlueButtonBg" Width="100%" Height="{margin}*3" Color="#3477BE" CornerRadius="5">
		<WhilePressed>
			<Change BlueButtonBg.Color="#498DD5" />
		</WhilePressed>
	</Rectangle>
	<Rectangle ux:Class="GrayButton" ux:Name="GrayButtonBg" Width="100%" Height="{margin}*3" Color="#959595" CornerRadius="5">
		<WhilePressed>
			<Change GrayButtonBg.Color="#A7A7A7" />
		</WhilePressed>
	</Rectangle>
	<Rectangle ux:Class="OrangeButton" Width="100%" Height="{margin}*2.4" Color="#F17E22" />
	<Rectangle ux:Class="BlackButton" Width="100%" Height="{margin}*2.4" Color="#333333" />
	<Rectangle ux:Class="GrayButton2" Width="100%" Height="{margin}*2.4" Color="#959595" />

	<SystemFont Family="Baskerville" Style="Normal" Weight="Bold" ux:Global="BoldText" />

	<iOS.StatusBarConfig Style="Dark" Animation="Slide" IsVisible="True" />
	<Android.StatusBarConfig Color="#000f" IsVisible="True" />
	<MemoryPolicy ux:Global="MyUnload" UnloadInBackground="true" UnusedTimeout="0.5" UnpinInvisible="true"/>
	<ClientPanel Placed="{placed}">
		<Navigator DefaultPath="Intro">
			<Intro ux:Template="Intro" router="router" />
			<Login ux:Template="Login" router="router" />
			<MainPage ux:Template="MainPage" router="router" />
			<NoteManage ux:Template="NoteManage" router="router" />
			<DetailNote ux:Template="DetailNote" router="router" />
			<ChoiceSubject ux:Template="ChoiceSubject" router="router" />
			<ShowFile ux:Template="ShowFile" router="router" />
			<DetailFile ux:Template="DetailFile" router="router" />
			<PhotoCollection ux:Template="PhotoCollection" router="router" />
			<Notice ux:Template="Notice" router="router" />
			<ApplyEdu ux:Template="ApplyEdu" router="router" />
			<QnA ux:Template="QnA" router="router" />
			<RecieveWork ux:Template="RecieveWork" router="router" />
			<SendWork ux:Template="SendWork" router="router" />
			<Trash ux:Template="Trash" router="router" />
		</Navigator>
		<SavePanel ux:Name="savepanel3" Alignment="Bottom">
			<Image File="{takedPicture}">
				<Desaturate Amount="1" />
			</Image>
		</SavePanel>
	</ClientPanel>
</App>