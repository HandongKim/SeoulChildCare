<Page ux:Class="ChoiceSubject">
	<Router ux:Dependency="router"/>
	<WhileActive>
		<Callback Handler="{getTheSubjectList}" />
	</WhileActive>
	<JavaScript>
		var Observable = require('FuseJS/Observable');
		var Backend = require('Backend.js');
		var ValueFactory = require('ValueFactory');
		var incomeTF = Observable(true);
		var CASH_GB;

		this.Parameter.onValueChanged(null,function(x) {
			if (x == null) {
			}else {
				CASH_GB = Observable(x.CASH_GB);		
			}
		});

		var temp;
		var recievedData;
		var getEstiSearchLoadUrl;

		function searchTheSubjectList (esti_gb) {
			choiceSubjectLoadingCircleOn.value = true;
			getEstiSearchLoadUrl = Backend.BASE_URL + Backend.getEstiSearchLoad_URL;
			var dsParam = Backend.dsParam.substring(0, Backend.dsParam.length -1);
			console.log("esti_gb : " + esti_gb);
			subjects.clear();
			incomeDataFromServerList.clear();
			dsParam = dsParam + ', "ESTI_GB":"' + esti_gb + '", "BOOKGB":"01"}';
			console.log("20180101 dsParam1 : " + dsParam);
			console.log("getEstiSearchLoadUrl ==> " + getEstiSearchLoadUrl);
			var ds_bCash = CASH_GB.value;
			console.log("2017.12.30 log =================================================================");
			console.log("dsParam : " + dsParam);
			console.log("dsParm TYpe : " + typeof(dsParam) );
			console.log("2017.12.30 log =================================================================");
			console.log('{"dsParam":'+dsParam+',"ds_bCash": '+ds_bCash+'}');

			var jsonParam = JSON.parse('{"dsParam":'+dsParam+'}');
			fetch(getEstiSearchLoadUrl, {
				method: 'POST',
				headers: {
					"Content-type": "application/json"
				},
				body: JSON.stringify(jsonParam)
		        }).then(function(response) {
		        	console.log("WTF");
					console.log("2018.01.01 response : " + JSON.stringify(response));
					var responseHeaders = JSON.parse(response._bodyInit);
					console.log("2018.01.01 response._bodyInit : " + JSON.stringify(responseHeaders));						
					temp = responseHeaders.ds_estiList[1];
					console.log("responseHeaders.ds_estiList[1] : "+ JSON.stringify(temp) );
					// recievedData = temp;
					for (var i = 0 ; i < temp.length ; i++) {
						subjects.add(new income(temp[i]));
						incomeDataFromServerList.add(new incomeDataFromServer(temp[i], i));
					}
					choiceSubjectLoadingCircleOn.value =false;
		            return response.json();
		        }).then(function(jsonData) {
		        
		        }).catch(function(err) {
		        
		        });
		}

		function income(subject) {
			if (subject.ESTI_GB == "31") {
				if (subject.ESTI_SUBCODE == null) {
					this.type = "1";
				} else {
					this.type = "2"
				}
			} else if (subject.ESTI_GB == "32") {
				if (subject.ESTI_SUBCODE == null) {
					this.type = "3";
				} else {
					this.type = "4"
				}
			}
			this.text = " " + subject.M_DISPLAY_NAME;
			this.name = subject.M_DISPLAY_NAME2;
			this.ESTI_CODE = subject.ESTI_CODE;
			this.ESTI_GB = subject.ESTI_GB;
			this.ESTI_SUBCODE = subject.ESTI_SUBCODE;
			this.ESTI_SUB_YN = subject.ESTI_SUB_YN;
			this.ESTI_NAME = subject.M_DISPLAY_NAME2;
			console.log("add" + subject.DISPLAY_NAME);
		}

		var incomeDataFromServerList = Observable();

		function incomeDataFromServer(args, index) {
			this.INDEX = index;

			if (args.DISPLAY_NAME!=null) {
				this.DISPLAY_NAME = args.DISPLAY_NAME;	
			} else {
				this.DISPLAY_NAME = "";	
			}
			
			if (args.DISPLAY_CODE!=null) {
			this.DISPLAY_CODE = args.DISPLAY_CODE;
			} else {
				this.DISPLAY_CODE = "";	
			}

			if (args.ESTI_SUBNAME!=null) {
			this.ESTI_SUBNAME = args.ESTI_SUBNAME;
			} else {
				this.ESTI_SUBNAME = "";	
			}


			if (args.ESTI_YEAR!=null) {
			this.ESTI_YEAR = args.ESTI_YEAR;
			} else {
				this.ESTI_YEAR = "";	
			}


			if (args.ESTI_GB!=null) {
			this.ESTI_GB = args.ESTI_GB;
			} else {
				this.ESTI_GB = "";	
			} 



			if (args.ESTI_CODE!=null) {
			this.ESTI_CODE = args.ESTI_CODE;
			} else {
				this.ESTI_CODE = "";	
			}



			if (args.ESTI_DISPLAY!=null) {
			this.ESTI_DISPLAY = args.ESTI_DISPLAY;
			} else {
				this.ESTI_DISPLAY = "";	
			}



			if (args.ESTI_NAME!=null) {
			this.ESTI_NAME = args.ESTI_NAME;
			} else {
				this.ESTI_NAME = "";	
			}


			if (args.M_DISPLAY_NAME2!=null) {
			this.M_DISPLAY_NAME2 = args.M_DISPLAY_NAME2;
			} else {
				this.M_DISPLAY_NAME2 = "";	
			}




			if (args.MEMCODE!=null) {
			this.MEMCODE = args.MEMCODE;
			} else {
				this.MEMCODE = "";	
			}


			if (args.M_DISPLAY_NAME!=null) {
			this.M_DISPLAY_NAME = args.M_DISPLAY_NAME;
			} else {
				this.M_DISPLAY_NAME = "";	
			}



			if (args.MEMO!=null) {
			this.MEMO = args.MEMO;
			} else {
				this.MEMO = "";	
			}



			if (args.SORT_GUBUN!=null) {
			this.SORT_GUBUN = args.SORT_GUBUN;
			} else {
				this.SORT_GUBUN = "";	
			}




			if (args.ESTI_PART!=null) {
			this.ESTI_PART = args.ESTI_PART;
			} else {
				this.ESTI_PART = "";	
			}




			if (args.ESTI_SUBCODE!=null) {
			this.ESTI_SUBCODE = args.ESTI_SUBCODE;
			} else {
				this.ESTI_SUBCODE = "";	
			}




			if (args.BOOK_GB!=null) {
			this.BOOK_GB = args.BOOK_GB;
			} else {
				this.BOOK_GB = "";	
			}



			if (args.ESTI_SUB_YN!=null) {
			this.ESTI_SUB_YN = args.ESTI_SUB_YN;
			} else {
				this.ESTI_SUB_YN = "";	
			}
		}



		var subjects = Observable();

		// for (var i = 0 ; i < recievedData.length ; i++) {
		// 	subjects.add(new income(recievedData[i]));
		// }

		function incomeClick() {
			subjects.clear();
			// for (var i = 0 ; i < incomeSubject.length ; i++) {
			// 	subjects.add(incomeSubject[i]);
			// }
			// for (var i = 0 ; i < recievedData.length ; i++) {
			// 	subjects.add(new income(recievedData[i]));
			// }
			searchTheSubjectList("31");
		}

		function outcomeClick() {
			subjects.clear();
			// for (var i = 0 ; i < outcomeSubject.length ; i++) {
			// 	subjects.add(outcomeSubject[i]);
			// }
			searchTheSubjectList("32");
		}

		function selectSubject(arg) {
			// console.log(arg.data.text);
			console.log("selectSubject : " + JSON.stringify(arg));
			if (arg.data.ESTI_CODE == "2020201") {
				console.log(" '업무추진비' 계정과목은 적요 내용 입력 방식에 따라 모바일 화면에서는 등록/수정할 수 없습니다. PC화면에서 직접 등록/수정하셔야 합니다.");
				alert.title.value = "";
				alert.message.value = "'업무추진비' 계정과목은 적요 내용 입력 방식에 따라 모바일 화면에서는 등록/수정할 수 없습니다. PC화면에서 직접 등록/수정하셔야 합니다.";
				alert.type.value = "Check";
				alert.layer.value = "Overlay";
			} else {
				if (arg.data.ESTI_SUBCODE == null && arg.data.ESTI_SUB_YN == "Y") {
					//
				} else {
					
					if (arg.data.type == 1) {
						Backend.subject.color.value = "#4C9DFF";
						Backend.subject.type.value = "목";
					} else if (arg.data.type == 2) {
						Backend.subject.color.value = "#8BBDFF";
						Backend.subject.type.value = "세목";
					} else if (arg.data.type == 3) {
						Backend.subject.color.value = "#FF4200";
						Backend.subject.type.value = "목";
					} else if (arg.data.type == 4) {
						Backend.subject.color.value = "#FFBA85";
						Backend.subject.type.value = "세목";
					}
					
					Backend.subject.isChoice.value = true;
					Backend.subject.name.value = arg.data.name;
					Backend.subject.ESTI_CODE.value = arg.data.ESTI_CODE;
					Backend.subject.ESTI_GB.value = arg.data.ESTI_GB;
					Backend.subject.ESTI_SUBCODE.value = arg.data.ESTI_SUBCODE;
					Backend.subject.ESTI_NAME.value = arg.data.ESTI_NAME;

					console.log("======================== ************************************************");
					console.log("arg.data.ESTI_NAME : " + arg.data.ESTI_NAME);
					console.log("Backend.subject.ESTI_SUBCODE.value : " + Backend.subject.ESTI_NAME.value);
					console.log("======================== ************************************************");


					Backend.chosenSubject.isChoice = true;
					Backend.chosenSubject.name = arg.data.name;
					Backend.chosenSubject.ESTI_CODE = arg.data.ESTI_CODE;
					Backend.chosenSubject.ESTI_GB = arg.data.ESTI_GB;
					Backend.chosenSubject.ESTI_SUBCODE = arg.data.ESTI_SUBCODE;	



					console.log("Backend.subject.isChoice.value : " + Backend.subject.isChoice.value);
					console.log("Backend.subject.name.value : " + Backend.subject.name.value);
					console.log("Backend.subject.ESTI_CODE.value : " + Backend.subject.ESTI_CODE.value);
					console.log("Backend.subject.ESTI_SUBCODE.value : " + Backend.subject.ESTI_SUBCODE.value);

					var infoJSON = {
						choicesubject_ischoice:Backend.subject.isChoice.value,
						choicesubject_name:Backend.subject.name.value,
						choicesubject_esti_code:Backend.subject.ESTI_CODE.value,
						choicesubject_esti_subcode : Backend.subject.ESTI_SUBCODE.value
					}

					var str = JSON.stringify(infoJSON);
					ValueFactory.setInfoJson(str);

					choiceSubjectAlertWithConfirm.message.value = "선택 되었습니다.";
					choiceSubjectAlertWithConfirm.layer.value = "Overlay";
					Backend.isItFromNoteManage.value = false;
				}
			}	
		}

		var choiceSubjectAlertWithConfirm = {
			title: Observable(""),
			message: Observable(""),
			type: Observable("Check"),
			layer: Observable("Background")
		};

		var alert = {
			title: Observable(),
			message: Observable(),
			type: Observable("Check"),
			layer: Observable("Background")
		};

		function getTheSubjectList() {
			console.log("getTheSubjectList was called");
			choiceSubjectAlertWithConfirm.layer.value = "Background";

			if (CASH_GB.value == "1") {
					incomeTF.value = false;
			} else {
				incomeTF.value = true;
			}
				console.log("2018.01.01 CASH_GB : " + CASH_GB.value);
				searchTheSubjectList("3"+CASH_GB.value);
		}

		var choiceSubjectLoadingCircleOn = Observable(false);

		module.exports = {
			subjects, incomeClick, outcomeClick, selectSubject,getTheSubjectList, incomeTF, choiceSubjectAlertWithConfirm, choiceSubjectLoadingCircleOn, alert
		};
	</JavaScript>

	<DockPanel ux:Name="choiceSubjectPanel" Width="100%" Height="100%" Color="White">
		<topBar Dock="Top" />

		<Grid ColumnCount="1" Rows="Auto" Dock="Top" Color="#FFF">
			<WrapPanel Margin="{margin}" Alignment="CenterLeft">
				<Circle Width="{margin}/2" Height="{margin}/2" Color="Black" Alignment="Center" Y="-10%" Margin="0, 0, {margin}/2, 0" />
				<Text Value="계정과목선택" FontSize="{margin}*1.2" Color="Black"  />
			</WrapPanel>
			<Rectangle Width="100%" Height="1" Color="#3E66C5" />
		</Grid>

		<Panel Dock="Top" Width="95%">
			<Rectangle Width="100%" Height="2" Color="#333333" Alignment="Bottom" />
			<Grid Width="100%" ColumnCount="3" Columns="1*, 1*, 2*" Color="#ddd" CellSpacing="1" Height="{margin}*3">
				<Panel ux:Name="incomePanel" Width="100%" Color="#333333" Margin="1,1,0,1">
					<Text ux:Name="incomeText" Value="세입계정" Alignment="Center" Color="#FFFFFF" />
					<Clicked>
						<Callback Handler="{incomeClick}" />
						<Toggle Target="changeSubject" />
					</Clicked>

					<WhileTrue ux:Name="changeSubject" Value="{incomeTF}">
						<Change incomePanel.Color="#FFFFFF" />
						<Change incomeText.Color="#333333" />
						<Change outcomePanel.Color="#333333" />
						<Change outcomeText.Color="#FFFFFF" />
					</WhileTrue>
				</Panel>
				<Panel ux:Name="outcomePanel" Width="100%" Color="#FFFFFF" Margin="0,1,0,1">
					<Text ux:Name="outcomeText" Value="세출계정" Alignment="Center" Color="#333333" />
					<Clicked>
						<Callback Handler="{outcomeClick}" />
						<Toggle Target="changeSubject" />
					</Clicked>
				</Panel>
				<Panel Width="100%" Color="White" Margin="0,1,1,1" />
			</Grid>
		</Panel>

		<ScrollView SnapMinTransform="false" SnapMaxTransform="false" Width="95%">
			<StackPanel Color="#eee">
				<Each Items="{subjects}">
					<WrapPanel Width="100%" Color="White" Margin="1, 0.5">
						<Match Value="{type}">
							<Case String="1">
								<Panel Width="15" />
								<Rectangle CornerRadius="3" Color="#4487CE">
									<Text Value="목" Margin="3" Color="White" Alignment="Center" />
								</Rectangle>
							</Case>

							<Case String="2">
								<Panel Width="30" />
								<Rectangle CornerRadius="3" Color="#599DE5">
									<Text Value="세목" Margin="3" Color="White" Alignment="Center" />
								</Rectangle>
							</Case>

							<Case String="3">
								<Panel Width="15" />
								<Rectangle CornerRadius="3" Color="#F17E22">
									<Text Value="목" Margin="3" Color="White" Alignment="Center" />
								</Rectangle>
							</Case>

							<Case String="4">
								<Panel Width="30" />
								<Rectangle CornerRadius="3" Color="#F1A248">
									<Text Value="세목" Margin="3" Color="White" Alignment="Center" />
								</Rectangle>
							</Case>
						</Match>

						<Text Value="{text}" Alignment="Center" />

						<Clicked>
							<Callback Handler="{selectSubject}" />
						</Clicked>
					</WrapPanel>
				</Each>
			</StackPanel>
		</ScrollView>
	</DockPanel>




<Rectangle Width="{margin}*23" Alignment="Center" Color="White" Layer="{choiceSubjectAlertWithConfirm.layer}">
	<Stroke Width="1" Color="Black" />
	<StackPanel>
		<Panel>
			<Text Value="{choiceSubjectAlertWithConfirm.title}" Alignment="CenterLeft" Margin="{margin}*4/3, {margin}/3" FontSize="{margin}" Color="White" />

			<Image File="Images/alert_top.png" Alignment="TopCenter" />
		</Panel>

		<Panel Margin="{margin}*5/7">
			<Text Value="{choiceSubjectAlertWithConfirm.message}" Alignment="Center" FontSize="{margin}" Color="#333" TextWrapping="Wrap" />
		</Panel>

		<Panel Margin="{margin}">
			<BlueButton>
				<Text Value="확인" Alignment="Center" Color="White" />

				<Clicked>
					<!-- <Callback Handler="{getListDetailNote}" />
					<Callback Handler="{viewWillAppear}" /> -->
					<Callback Handler="{goBackToPrevious}" />

				</Clicked>
			</BlueButton>
		</Panel>
	</StackPanel>
</Rectangle>






<Panel ux:Name="photoCollectionLoadingPanel" Width="100%" Height="100%" Color="#ccc8" Layer="Background">
	<WhileTrue ux:Name="photoCollectionLoadingTF" Value="{choiceSubjectLoadingCircleOn}">
		<Change photoCollectionLoadingPanel.Layer="Overlay" />
		<Spin Target="photoCollectionLoadingCircle" Frequency="2" />
		<Cycle Target="photoCollectionLoadingCircle.LengthAngleDegrees" Low="30" High="300" Frequency="0.7" />
	</WhileTrue>

	<Circle ux:Name="photoCollectionLoadingCircle" Width="50" Height="50" StartAngleDegrees="0" LengthAngleDegrees="90">
		<Stroke Width="5" Color="White" />
	</Circle>
</Panel>






<Alert ux:Name="detailNoteAlert" Title="{alert.title}" MainText="{alert.message}" Type="{alert.type}" Layer="{alert.layer}" />









</Page>
